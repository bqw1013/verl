; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @_swiglu_forward_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = sext i32 %5 to i64, !dbg !11
  %7 = sext i32 %3 to i64, !dbg !12
  %8 = mul nsw i64 %6, %7, !dbg !12
  %9 = getelementptr bfloat, ptr addrspace(1) %0, i64 %8, !dbg !13
  %10 = getelementptr bfloat, ptr addrspace(1) %1, i64 %8, !dbg !14
  %11 = getelementptr bfloat, ptr addrspace(1) %2, i64 %8, !dbg !15
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %13 = shl i32 %12, 3, !dbg !16
  %14 = and i32 %13, 4088, !dbg !16
  %15 = or disjoint i32 %14, 4096, !dbg !16
  %16 = or disjoint i32 %14, 8192, !dbg !16
  %17 = or disjoint i32 %14, 12288, !dbg !16
  %18 = icmp samesign ult i32 %16, 8960, !dbg !17
  %19 = zext nneg i32 %14 to i64, !dbg !18
  %20 = getelementptr bfloat, ptr addrspace(1) %9, i64 %19, !dbg !18
  %21 = zext nneg i32 %15 to i64, !dbg !18
  %22 = getelementptr bfloat, ptr addrspace(1) %9, i64 %21, !dbg !18
  %23 = zext nneg i32 %16 to i64, !dbg !18
  %24 = getelementptr bfloat, ptr addrspace(1) %9, i64 %23, !dbg !18
  %25 = zext nneg i32 %17 to i64, !dbg !18
  %26 = getelementptr bfloat, ptr addrspace(1) %9, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %29 = bitcast i32 %28 to <2 x bfloat>, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %31 = bitcast i32 %30 to <2 x bfloat>, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %33 = bitcast i32 %32 to <2 x bfloat>, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %35 = bitcast i32 %34 to <2 x bfloat>, !dbg !19
  %36 = extractelement <2 x bfloat> %29, i64 0, !dbg !19
  %37 = extractelement <2 x bfloat> %29, i64 1, !dbg !19
  %38 = extractelement <2 x bfloat> %31, i64 0, !dbg !19
  %39 = extractelement <2 x bfloat> %31, i64 1, !dbg !19
  %40 = extractelement <2 x bfloat> %33, i64 0, !dbg !19
  %41 = extractelement <2 x bfloat> %33, i64 1, !dbg !19
  %42 = extractelement <2 x bfloat> %35, i64 0, !dbg !19
  %43 = extractelement <2 x bfloat> %35, i64 1, !dbg !19
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #1, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !19
  %46 = bitcast i32 %45 to <2 x bfloat>, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !19
  %48 = bitcast i32 %47 to <2 x bfloat>, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !19
  %50 = bitcast i32 %49 to <2 x bfloat>, !dbg !19
  %51 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !19
  %52 = bitcast i32 %51 to <2 x bfloat>, !dbg !19
  %53 = extractelement <2 x bfloat> %46, i64 0, !dbg !19
  %54 = extractelement <2 x bfloat> %46, i64 1, !dbg !19
  %55 = extractelement <2 x bfloat> %48, i64 0, !dbg !19
  %56 = extractelement <2 x bfloat> %48, i64 1, !dbg !19
  %57 = extractelement <2 x bfloat> %50, i64 0, !dbg !19
  %58 = extractelement <2 x bfloat> %50, i64 1, !dbg !19
  %59 = extractelement <2 x bfloat> %52, i64 0, !dbg !19
  %60 = extractelement <2 x bfloat> %52, i64 1, !dbg !19
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !19
  %63 = bitcast i32 %62 to <2 x bfloat>, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !19
  %65 = bitcast i32 %64 to <2 x bfloat>, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !19
  %67 = bitcast i32 %66 to <2 x bfloat>, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !19
  %69 = bitcast i32 %68 to <2 x bfloat>, !dbg !19
  %70 = extractelement <2 x bfloat> %63, i64 0, !dbg !19
  %71 = extractelement <2 x bfloat> %63, i64 1, !dbg !19
  %72 = extractelement <2 x bfloat> %65, i64 0, !dbg !19
  %73 = extractelement <2 x bfloat> %65, i64 1, !dbg !19
  %74 = extractelement <2 x bfloat> %67, i64 0, !dbg !19
  %75 = extractelement <2 x bfloat> %67, i64 1, !dbg !19
  %76 = extractelement <2 x bfloat> %69, i64 0, !dbg !19
  %77 = extractelement <2 x bfloat> %69, i64 1, !dbg !19
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #1, !dbg !19
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !19
  %80 = bitcast i32 %79 to <2 x bfloat>, !dbg !19
  %81 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !19
  %82 = bitcast i32 %81 to <2 x bfloat>, !dbg !19
  %83 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !19
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !19
  %85 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !19
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !19
  %87 = extractelement <2 x bfloat> %80, i64 0, !dbg !19
  %88 = extractelement <2 x bfloat> %80, i64 1, !dbg !19
  %89 = extractelement <2 x bfloat> %82, i64 0, !dbg !19
  %90 = extractelement <2 x bfloat> %82, i64 1, !dbg !19
  %91 = extractelement <2 x bfloat> %84, i64 0, !dbg !19
  %92 = extractelement <2 x bfloat> %84, i64 1, !dbg !19
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !19
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !19
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %36) #1, !dbg !20
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %37) #1, !dbg !20
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %38) #1, !dbg !20
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %39) #1, !dbg !20
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %40) #1, !dbg !20
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %41) #1, !dbg !20
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %42) #1, !dbg !20
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %43) #1, !dbg !20
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %53) #1, !dbg !20
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %54) #1, !dbg !20
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %55) #1, !dbg !20
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %56) #1, !dbg !20
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %57) #1, !dbg !20
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %58) #1, !dbg !20
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %59) #1, !dbg !20
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %60) #1, !dbg !20
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %70) #1, !dbg !20
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %71) #1, !dbg !20
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %72) #1, !dbg !20
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %73) #1, !dbg !20
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %74) #1, !dbg !20
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %75) #1, !dbg !20
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %76) #1, !dbg !20
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %77) #1, !dbg !20
  %119 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %87) #1, !dbg !20
  %120 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %88) #1, !dbg !20
  %121 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %89) #1, !dbg !20
  %122 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %90) #1, !dbg !20
  %123 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %91) #1, !dbg !20
  %124 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %92) #1, !dbg !20
  %125 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %93) #1, !dbg !20
  %126 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %94) #1, !dbg !20
  %127 = getelementptr bfloat, ptr addrspace(1) %10, i64 %19, !dbg !21
  %128 = getelementptr bfloat, ptr addrspace(1) %10, i64 %21, !dbg !21
  %129 = getelementptr bfloat, ptr addrspace(1) %10, i64 %23, !dbg !21
  %130 = getelementptr bfloat, ptr addrspace(1) %10, i64 %25, !dbg !21
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #1, !dbg !22
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !22
  %133 = bitcast i32 %132 to <2 x bfloat>, !dbg !22
  %134 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !22
  %135 = bitcast i32 %134 to <2 x bfloat>, !dbg !22
  %136 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !22
  %137 = bitcast i32 %136 to <2 x bfloat>, !dbg !22
  %138 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !22
  %139 = bitcast i32 %138 to <2 x bfloat>, !dbg !22
  %140 = extractelement <2 x bfloat> %133, i64 0, !dbg !22
  %141 = extractelement <2 x bfloat> %133, i64 1, !dbg !22
  %142 = extractelement <2 x bfloat> %135, i64 0, !dbg !22
  %143 = extractelement <2 x bfloat> %135, i64 1, !dbg !22
  %144 = extractelement <2 x bfloat> %137, i64 0, !dbg !22
  %145 = extractelement <2 x bfloat> %137, i64 1, !dbg !22
  %146 = extractelement <2 x bfloat> %139, i64 0, !dbg !22
  %147 = extractelement <2 x bfloat> %139, i64 1, !dbg !22
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #1, !dbg !22
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !22
  %150 = bitcast i32 %149 to <2 x bfloat>, !dbg !22
  %151 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !22
  %152 = bitcast i32 %151 to <2 x bfloat>, !dbg !22
  %153 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !22
  %154 = bitcast i32 %153 to <2 x bfloat>, !dbg !22
  %155 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !22
  %156 = bitcast i32 %155 to <2 x bfloat>, !dbg !22
  %157 = extractelement <2 x bfloat> %150, i64 0, !dbg !22
  %158 = extractelement <2 x bfloat> %150, i64 1, !dbg !22
  %159 = extractelement <2 x bfloat> %152, i64 0, !dbg !22
  %160 = extractelement <2 x bfloat> %152, i64 1, !dbg !22
  %161 = extractelement <2 x bfloat> %154, i64 0, !dbg !22
  %162 = extractelement <2 x bfloat> %154, i64 1, !dbg !22
  %163 = extractelement <2 x bfloat> %156, i64 0, !dbg !22
  %164 = extractelement <2 x bfloat> %156, i64 1, !dbg !22
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !22
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !22
  %167 = bitcast i32 %166 to <2 x bfloat>, !dbg !22
  %168 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !22
  %169 = bitcast i32 %168 to <2 x bfloat>, !dbg !22
  %170 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !22
  %171 = bitcast i32 %170 to <2 x bfloat>, !dbg !22
  %172 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !22
  %173 = bitcast i32 %172 to <2 x bfloat>, !dbg !22
  %174 = extractelement <2 x bfloat> %167, i64 0, !dbg !22
  %175 = extractelement <2 x bfloat> %167, i64 1, !dbg !22
  %176 = extractelement <2 x bfloat> %169, i64 0, !dbg !22
  %177 = extractelement <2 x bfloat> %169, i64 1, !dbg !22
  %178 = extractelement <2 x bfloat> %171, i64 0, !dbg !22
  %179 = extractelement <2 x bfloat> %171, i64 1, !dbg !22
  %180 = extractelement <2 x bfloat> %173, i64 0, !dbg !22
  %181 = extractelement <2 x bfloat> %173, i64 1, !dbg !22
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #1, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !22
  %184 = bitcast i32 %183 to <2 x bfloat>, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !22
  %186 = bitcast i32 %185 to <2 x bfloat>, !dbg !22
  %187 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !22
  %188 = bitcast i32 %187 to <2 x bfloat>, !dbg !22
  %189 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !22
  %190 = bitcast i32 %189 to <2 x bfloat>, !dbg !22
  %191 = extractelement <2 x bfloat> %184, i64 0, !dbg !22
  %192 = extractelement <2 x bfloat> %184, i64 1, !dbg !22
  %193 = extractelement <2 x bfloat> %186, i64 0, !dbg !22
  %194 = extractelement <2 x bfloat> %186, i64 1, !dbg !22
  %195 = extractelement <2 x bfloat> %188, i64 0, !dbg !22
  %196 = extractelement <2 x bfloat> %188, i64 1, !dbg !22
  %197 = extractelement <2 x bfloat> %190, i64 0, !dbg !22
  %198 = extractelement <2 x bfloat> %190, i64 1, !dbg !22
  %199 = fsub float 0.000000e+00, %95, !dbg !23
  %200 = fsub float 0.000000e+00, %96, !dbg !23
  %201 = fsub float 0.000000e+00, %97, !dbg !23
  %202 = fsub float 0.000000e+00, %98, !dbg !23
  %203 = fsub float 0.000000e+00, %99, !dbg !23
  %204 = fsub float 0.000000e+00, %100, !dbg !23
  %205 = fsub float 0.000000e+00, %101, !dbg !23
  %206 = fsub float 0.000000e+00, %102, !dbg !23
  %207 = fsub float 0.000000e+00, %103, !dbg !23
  %208 = fsub float 0.000000e+00, %104, !dbg !23
  %209 = fsub float 0.000000e+00, %105, !dbg !23
  %210 = fsub float 0.000000e+00, %106, !dbg !23
  %211 = fsub float 0.000000e+00, %107, !dbg !23
  %212 = fsub float 0.000000e+00, %108, !dbg !23
  %213 = fsub float 0.000000e+00, %109, !dbg !23
  %214 = fsub float 0.000000e+00, %110, !dbg !23
  %215 = fsub float 0.000000e+00, %111, !dbg !23
  %216 = fsub float 0.000000e+00, %112, !dbg !23
  %217 = fsub float 0.000000e+00, %113, !dbg !23
  %218 = fsub float 0.000000e+00, %114, !dbg !23
  %219 = fsub float 0.000000e+00, %115, !dbg !23
  %220 = fsub float 0.000000e+00, %116, !dbg !23
  %221 = fsub float 0.000000e+00, %117, !dbg !23
  %222 = fsub float 0.000000e+00, %118, !dbg !23
  %223 = fsub float 0.000000e+00, %119, !dbg !23
  %224 = fsub float 0.000000e+00, %120, !dbg !23
  %225 = fsub float 0.000000e+00, %121, !dbg !23
  %226 = fsub float 0.000000e+00, %122, !dbg !23
  %227 = fsub float 0.000000e+00, %123, !dbg !23
  %228 = fsub float 0.000000e+00, %124, !dbg !23
  %229 = fsub float 0.000000e+00, %125, !dbg !23
  %230 = fsub float 0.000000e+00, %126, !dbg !23
  %231 = fmul float %199, 0x3FF7154760000000, !dbg !28
  %232 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %231) #1, !dbg !28
  %233 = fmul float %200, 0x3FF7154760000000, !dbg !28
  %234 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %233) #1, !dbg !28
  %235 = fmul float %201, 0x3FF7154760000000, !dbg !28
  %236 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %235) #1, !dbg !28
  %237 = fmul float %202, 0x3FF7154760000000, !dbg !28
  %238 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %237) #1, !dbg !28
  %239 = fmul float %203, 0x3FF7154760000000, !dbg !28
  %240 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %239) #1, !dbg !28
  %241 = fmul float %204, 0x3FF7154760000000, !dbg !28
  %242 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %241) #1, !dbg !28
  %243 = fmul float %205, 0x3FF7154760000000, !dbg !28
  %244 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %243) #1, !dbg !28
  %245 = fmul float %206, 0x3FF7154760000000, !dbg !28
  %246 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %245) #1, !dbg !28
  %247 = fmul float %207, 0x3FF7154760000000, !dbg !28
  %248 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %247) #1, !dbg !28
  %249 = fmul float %208, 0x3FF7154760000000, !dbg !28
  %250 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %249) #1, !dbg !28
  %251 = fmul float %209, 0x3FF7154760000000, !dbg !28
  %252 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %251) #1, !dbg !28
  %253 = fmul float %210, 0x3FF7154760000000, !dbg !28
  %254 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %253) #1, !dbg !28
  %255 = fmul float %211, 0x3FF7154760000000, !dbg !28
  %256 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %255) #1, !dbg !28
  %257 = fmul float %212, 0x3FF7154760000000, !dbg !28
  %258 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %257) #1, !dbg !28
  %259 = fmul float %213, 0x3FF7154760000000, !dbg !28
  %260 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %259) #1, !dbg !28
  %261 = fmul float %214, 0x3FF7154760000000, !dbg !28
  %262 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %261) #1, !dbg !28
  %263 = fmul float %215, 0x3FF7154760000000, !dbg !28
  %264 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %263) #1, !dbg !28
  %265 = fmul float %216, 0x3FF7154760000000, !dbg !28
  %266 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %265) #1, !dbg !28
  %267 = fmul float %217, 0x3FF7154760000000, !dbg !28
  %268 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %267) #1, !dbg !28
  %269 = fmul float %218, 0x3FF7154760000000, !dbg !28
  %270 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %269) #1, !dbg !28
  %271 = fmul float %219, 0x3FF7154760000000, !dbg !28
  %272 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %271) #1, !dbg !28
  %273 = fmul float %220, 0x3FF7154760000000, !dbg !28
  %274 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %273) #1, !dbg !28
  %275 = fmul float %221, 0x3FF7154760000000, !dbg !28
  %276 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %275) #1, !dbg !28
  %277 = fmul float %222, 0x3FF7154760000000, !dbg !28
  %278 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %277) #1, !dbg !28
  %279 = fmul float %223, 0x3FF7154760000000, !dbg !28
  %280 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %279) #1, !dbg !28
  %281 = fmul float %224, 0x3FF7154760000000, !dbg !28
  %282 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %281) #1, !dbg !28
  %283 = fmul float %225, 0x3FF7154760000000, !dbg !28
  %284 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %283) #1, !dbg !28
  %285 = fmul float %226, 0x3FF7154760000000, !dbg !28
  %286 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %285) #1, !dbg !28
  %287 = fmul float %227, 0x3FF7154760000000, !dbg !28
  %288 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %287) #1, !dbg !28
  %289 = fmul float %228, 0x3FF7154760000000, !dbg !28
  %290 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %289) #1, !dbg !28
  %291 = fmul float %229, 0x3FF7154760000000, !dbg !28
  %292 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %291) #1, !dbg !28
  %293 = fmul float %230, 0x3FF7154760000000, !dbg !28
  %294 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %293) #1, !dbg !28
  %295 = fadd float %232, 1.000000e+00, !dbg !29
  %296 = fadd float %234, 1.000000e+00, !dbg !29
  %297 = fadd float %236, 1.000000e+00, !dbg !29
  %298 = fadd float %238, 1.000000e+00, !dbg !29
  %299 = fadd float %240, 1.000000e+00, !dbg !29
  %300 = fadd float %242, 1.000000e+00, !dbg !29
  %301 = fadd float %244, 1.000000e+00, !dbg !29
  %302 = fadd float %246, 1.000000e+00, !dbg !29
  %303 = fadd float %248, 1.000000e+00, !dbg !29
  %304 = fadd float %250, 1.000000e+00, !dbg !29
  %305 = fadd float %252, 1.000000e+00, !dbg !29
  %306 = fadd float %254, 1.000000e+00, !dbg !29
  %307 = fadd float %256, 1.000000e+00, !dbg !29
  %308 = fadd float %258, 1.000000e+00, !dbg !29
  %309 = fadd float %260, 1.000000e+00, !dbg !29
  %310 = fadd float %262, 1.000000e+00, !dbg !29
  %311 = fadd float %264, 1.000000e+00, !dbg !29
  %312 = fadd float %266, 1.000000e+00, !dbg !29
  %313 = fadd float %268, 1.000000e+00, !dbg !29
  %314 = fadd float %270, 1.000000e+00, !dbg !29
  %315 = fadd float %272, 1.000000e+00, !dbg !29
  %316 = fadd float %274, 1.000000e+00, !dbg !29
  %317 = fadd float %276, 1.000000e+00, !dbg !29
  %318 = fadd float %278, 1.000000e+00, !dbg !29
  %319 = fadd float %280, 1.000000e+00, !dbg !29
  %320 = fadd float %282, 1.000000e+00, !dbg !29
  %321 = fadd float %284, 1.000000e+00, !dbg !29
  %322 = fadd float %286, 1.000000e+00, !dbg !29
  %323 = fadd float %288, 1.000000e+00, !dbg !29
  %324 = fadd float %290, 1.000000e+00, !dbg !29
  %325 = fadd float %292, 1.000000e+00, !dbg !29
  %326 = fadd float %294, 1.000000e+00, !dbg !29
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %295) #1, !dbg !30
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %296) #1, !dbg !30
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %297) #1, !dbg !30
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %298) #1, !dbg !30
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %299) #1, !dbg !30
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %300) #1, !dbg !30
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %301) #1, !dbg !30
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %302) #1, !dbg !30
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %303) #1, !dbg !30
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %304) #1, !dbg !30
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %305) #1, !dbg !30
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %306) #1, !dbg !30
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %307) #1, !dbg !30
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %308) #1, !dbg !30
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %309) #1, !dbg !30
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %310) #1, !dbg !30
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %311) #1, !dbg !30
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %312) #1, !dbg !30
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %313) #1, !dbg !30
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %314) #1, !dbg !30
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %315) #1, !dbg !30
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %316) #1, !dbg !30
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %317) #1, !dbg !30
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %318) #1, !dbg !30
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %319) #1, !dbg !30
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %320) #1, !dbg !30
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %321) #1, !dbg !30
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %322) #1, !dbg !30
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %323) #1, !dbg !30
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %324) #1, !dbg !30
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %325) #1, !dbg !30
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %326) #1, !dbg !30
  %359 = fmul float %95, %327, !dbg !31
  %360 = fmul float %96, %328, !dbg !31
  %361 = fmul float %97, %329, !dbg !31
  %362 = fmul float %98, %330, !dbg !31
  %363 = fmul float %99, %331, !dbg !31
  %364 = fmul float %100, %332, !dbg !31
  %365 = fmul float %101, %333, !dbg !31
  %366 = fmul float %102, %334, !dbg !31
  %367 = fmul float %103, %335, !dbg !31
  %368 = fmul float %104, %336, !dbg !31
  %369 = fmul float %105, %337, !dbg !31
  %370 = fmul float %106, %338, !dbg !31
  %371 = fmul float %107, %339, !dbg !31
  %372 = fmul float %108, %340, !dbg !31
  %373 = fmul float %109, %341, !dbg !31
  %374 = fmul float %110, %342, !dbg !31
  %375 = fmul float %111, %343, !dbg !31
  %376 = fmul float %112, %344, !dbg !31
  %377 = fmul float %113, %345, !dbg !31
  %378 = fmul float %114, %346, !dbg !31
  %379 = fmul float %115, %347, !dbg !31
  %380 = fmul float %116, %348, !dbg !31
  %381 = fmul float %117, %349, !dbg !31
  %382 = fmul float %118, %350, !dbg !31
  %383 = fmul float %119, %351, !dbg !31
  %384 = fmul float %120, %352, !dbg !31
  %385 = fmul float %121, %353, !dbg !31
  %386 = fmul float %122, %354, !dbg !31
  %387 = fmul float %123, %355, !dbg !31
  %388 = fmul float %124, %356, !dbg !31
  %389 = fmul float %125, %357, !dbg !31
  %390 = fmul float %126, %358, !dbg !31
  %391 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %140) #1, !dbg !32
  %392 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %141) #1, !dbg !32
  %393 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %142) #1, !dbg !32
  %394 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %143) #1, !dbg !32
  %395 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %144) #1, !dbg !32
  %396 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %145) #1, !dbg !32
  %397 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %146) #1, !dbg !32
  %398 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %147) #1, !dbg !32
  %399 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %157) #1, !dbg !32
  %400 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %158) #1, !dbg !32
  %401 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %159) #1, !dbg !32
  %402 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %160) #1, !dbg !32
  %403 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %161) #1, !dbg !32
  %404 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %162) #1, !dbg !32
  %405 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %163) #1, !dbg !32
  %406 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %164) #1, !dbg !32
  %407 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %174) #1, !dbg !32
  %408 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %175) #1, !dbg !32
  %409 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %176) #1, !dbg !32
  %410 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %177) #1, !dbg !32
  %411 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %178) #1, !dbg !32
  %412 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %179) #1, !dbg !32
  %413 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %180) #1, !dbg !32
  %414 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %181) #1, !dbg !32
  %415 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %191) #1, !dbg !32
  %416 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %192) #1, !dbg !32
  %417 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %193) #1, !dbg !32
  %418 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %194) #1, !dbg !32
  %419 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %195) #1, !dbg !32
  %420 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %196) #1, !dbg !32
  %421 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %197) #1, !dbg !32
  %422 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %198) #1, !dbg !32
  %423 = fmul float %359, %391, !dbg !32
  %424 = fmul float %360, %392, !dbg !32
  %425 = fmul float %361, %393, !dbg !32
  %426 = fmul float %362, %394, !dbg !32
  %427 = fmul float %363, %395, !dbg !32
  %428 = fmul float %364, %396, !dbg !32
  %429 = fmul float %365, %397, !dbg !32
  %430 = fmul float %366, %398, !dbg !32
  %431 = fmul float %367, %399, !dbg !32
  %432 = fmul float %368, %400, !dbg !32
  %433 = fmul float %369, %401, !dbg !32
  %434 = fmul float %370, %402, !dbg !32
  %435 = fmul float %371, %403, !dbg !32
  %436 = fmul float %372, %404, !dbg !32
  %437 = fmul float %373, %405, !dbg !32
  %438 = fmul float %374, %406, !dbg !32
  %439 = fmul float %375, %407, !dbg !32
  %440 = fmul float %376, %408, !dbg !32
  %441 = fmul float %377, %409, !dbg !32
  %442 = fmul float %378, %410, !dbg !32
  %443 = fmul float %379, %411, !dbg !32
  %444 = fmul float %380, %412, !dbg !32
  %445 = fmul float %381, %413, !dbg !32
  %446 = fmul float %382, %414, !dbg !32
  %447 = fmul float %383, %415, !dbg !32
  %448 = fmul float %384, %416, !dbg !32
  %449 = fmul float %385, %417, !dbg !32
  %450 = fmul float %386, %418, !dbg !32
  %451 = fmul float %387, %419, !dbg !32
  %452 = fmul float %388, %420, !dbg !32
  %453 = fmul float %389, %421, !dbg !32
  %454 = fmul float %390, %422, !dbg !32
  %455 = getelementptr bfloat, ptr addrspace(1) %11, i64 %19, !dbg !33
  %456 = getelementptr bfloat, ptr addrspace(1) %11, i64 %21, !dbg !33
  %457 = getelementptr bfloat, ptr addrspace(1) %11, i64 %23, !dbg !33
  %458 = getelementptr bfloat, ptr addrspace(1) %11, i64 %25, !dbg !33
  %459 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %423) #1, !dbg !34
  %460 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %424) #1, !dbg !34
  %461 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %425) #1, !dbg !34
  %462 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %426) #1, !dbg !34
  %463 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %427) #1, !dbg !34
  %464 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %428) #1, !dbg !34
  %465 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %429) #1, !dbg !34
  %466 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %430) #1, !dbg !34
  %467 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %431) #1, !dbg !34
  %468 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %432) #1, !dbg !34
  %469 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %433) #1, !dbg !34
  %470 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %434) #1, !dbg !34
  %471 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %435) #1, !dbg !34
  %472 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %436) #1, !dbg !34
  %473 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %437) #1, !dbg !34
  %474 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %438) #1, !dbg !34
  %475 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %439) #1, !dbg !34
  %476 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %440) #1, !dbg !34
  %477 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %441) #1, !dbg !34
  %478 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %442) #1, !dbg !34
  %479 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %443) #1, !dbg !34
  %480 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %444) #1, !dbg !34
  %481 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %445) #1, !dbg !34
  %482 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %446) #1, !dbg !34
  %483 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %447) #1, !dbg !34
  %484 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %448) #1, !dbg !34
  %485 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %449) #1, !dbg !34
  %486 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %450) #1, !dbg !34
  %487 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %451) #1, !dbg !34
  %488 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %452) #1, !dbg !34
  %489 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %453) #1, !dbg !34
  %490 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %454) #1, !dbg !34
  %491 = insertelement <2 x bfloat> poison, bfloat %459, i64 0, !dbg !34
  %492 = insertelement <2 x bfloat> %491, bfloat %460, i64 1, !dbg !34
  %493 = bitcast <2 x bfloat> %492 to i32, !dbg !34
  %494 = insertelement <2 x bfloat> poison, bfloat %461, i64 0, !dbg !34
  %495 = insertelement <2 x bfloat> %494, bfloat %462, i64 1, !dbg !34
  %496 = bitcast <2 x bfloat> %495 to i32, !dbg !34
  %497 = insertelement <2 x bfloat> poison, bfloat %463, i64 0, !dbg !34
  %498 = insertelement <2 x bfloat> %497, bfloat %464, i64 1, !dbg !34
  %499 = bitcast <2 x bfloat> %498 to i32, !dbg !34
  %500 = insertelement <2 x bfloat> poison, bfloat %465, i64 0, !dbg !34
  %501 = insertelement <2 x bfloat> %500, bfloat %466, i64 1, !dbg !34
  %502 = bitcast <2 x bfloat> %501 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %493, i32 %496, i32 %499, i32 %502, ptr addrspace(1) %455, i1 true) #1, !dbg !34
  %503 = insertelement <2 x bfloat> poison, bfloat %467, i64 0, !dbg !34
  %504 = insertelement <2 x bfloat> %503, bfloat %468, i64 1, !dbg !34
  %505 = bitcast <2 x bfloat> %504 to i32, !dbg !34
  %506 = insertelement <2 x bfloat> poison, bfloat %469, i64 0, !dbg !34
  %507 = insertelement <2 x bfloat> %506, bfloat %470, i64 1, !dbg !34
  %508 = bitcast <2 x bfloat> %507 to i32, !dbg !34
  %509 = insertelement <2 x bfloat> poison, bfloat %471, i64 0, !dbg !34
  %510 = insertelement <2 x bfloat> %509, bfloat %472, i64 1, !dbg !34
  %511 = bitcast <2 x bfloat> %510 to i32, !dbg !34
  %512 = insertelement <2 x bfloat> poison, bfloat %473, i64 0, !dbg !34
  %513 = insertelement <2 x bfloat> %512, bfloat %474, i64 1, !dbg !34
  %514 = bitcast <2 x bfloat> %513 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %505, i32 %508, i32 %511, i32 %514, ptr addrspace(1) %456, i1 true) #1, !dbg !34
  %515 = insertelement <2 x bfloat> poison, bfloat %475, i64 0, !dbg !34
  %516 = insertelement <2 x bfloat> %515, bfloat %476, i64 1, !dbg !34
  %517 = bitcast <2 x bfloat> %516 to i32, !dbg !34
  %518 = insertelement <2 x bfloat> poison, bfloat %477, i64 0, !dbg !34
  %519 = insertelement <2 x bfloat> %518, bfloat %478, i64 1, !dbg !34
  %520 = bitcast <2 x bfloat> %519 to i32, !dbg !34
  %521 = insertelement <2 x bfloat> poison, bfloat %479, i64 0, !dbg !34
  %522 = insertelement <2 x bfloat> %521, bfloat %480, i64 1, !dbg !34
  %523 = bitcast <2 x bfloat> %522 to i32, !dbg !34
  %524 = insertelement <2 x bfloat> poison, bfloat %481, i64 0, !dbg !34
  %525 = insertelement <2 x bfloat> %524, bfloat %482, i64 1, !dbg !34
  %526 = bitcast <2 x bfloat> %525 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %517, i32 %520, i32 %523, i32 %526, ptr addrspace(1) %457, i1 %18) #1, !dbg !34
  %527 = insertelement <2 x bfloat> poison, bfloat %483, i64 0, !dbg !34
  %528 = insertelement <2 x bfloat> %527, bfloat %484, i64 1, !dbg !34
  %529 = bitcast <2 x bfloat> %528 to i32, !dbg !34
  %530 = insertelement <2 x bfloat> poison, bfloat %485, i64 0, !dbg !34
  %531 = insertelement <2 x bfloat> %530, bfloat %486, i64 1, !dbg !34
  %532 = bitcast <2 x bfloat> %531 to i32, !dbg !34
  %533 = insertelement <2 x bfloat> poison, bfloat %487, i64 0, !dbg !34
  %534 = insertelement <2 x bfloat> %533, bfloat %488, i64 1, !dbg !34
  %535 = bitcast <2 x bfloat> %534 to i32, !dbg !34
  %536 = insertelement <2 x bfloat> poison, bfloat %489, i64 0, !dbg !34
  %537 = insertelement <2 x bfloat> %536, bfloat %490, i64 1, !dbg !34
  %538 = bitcast <2 x bfloat> %537 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %529, i32 %532, i32 %535, i32 %538, ptr addrspace(1) %458, i1 false) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "swiglu.py", directory: "/root/miniconda3/lib/python3.12/site-packages/liger_kernel/ops")
!4 = !{ptr @_swiglu_forward_kernel, !"kernel", i32 1}
!5 = !{ptr @_swiglu_forward_kernel, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_swiglu_forward_kernel", linkageName: "_swiglu_forward_kernel", scope: !3, file: !3, line: 15, type: !8, scopeLine: 15, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 16, column: 31, scope: !7)
!11 = !DILocation(line: 16, column: 37, scope: !7)
!12 = !DILocation(line: 19, column: 26, scope: !7)
!13 = !DILocation(line: 19, column: 13, scope: !7)
!14 = !DILocation(line: 20, column: 13, scope: !7)
!15 = !DILocation(line: 21, column: 13, scope: !7)
!16 = !DILocation(line: 23, column: 31, scope: !7)
!17 = !DILocation(line: 24, column: 25, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 27, column: 20, scope: !7)
!20 = !DILocation(line: 27, column: 64, scope: !7)
!21 = !DILocation(line: 28, column: 28, scope: !7)
!22 = !DILocation(line: 28, column: 20, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/root/miniconda3/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!27 = !DILocation(line: 29, column: 17, scope: !7)
!28 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !27)
!31 = !DILocation(line: 11, column: 15, scope: !26, inlinedAt: !27)
!32 = !DILocation(line: 29, column: 26, scope: !7)
!33 = !DILocation(line: 30, column: 21, scope: !7)
!34 = !DILocation(line: 30, column: 34, scope: !7)
!35 = !DILocation(line: 30, column: 4, scope: !7)
