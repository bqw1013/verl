//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_89
.address_size 64

	// .globl	_rms_norm_backward_kernel // -- Begin function _rms_norm_backward_kernel
.extern .shared .align 16 .b8 global_smem[];
                                        // @_rms_norm_backward_kernel
.visible .entry _rms_norm_backward_kernel(
	.param .u64 .ptr .global .align 1 _rms_norm_backward_kernel_param_0,
	.param .u32 _rms_norm_backward_kernel_param_1,
	.param .u64 .ptr .global .align 1 _rms_norm_backward_kernel_param_2,
	.param .u32 _rms_norm_backward_kernel_param_3,
	.param .u64 .ptr .global .align 1 _rms_norm_backward_kernel_param_4,
	.param .u32 _rms_norm_backward_kernel_param_5,
	.param .u64 .ptr .global .align 1 _rms_norm_backward_kernel_param_6,
	.param .u64 .ptr .global .align 1 _rms_norm_backward_kernel_param_7,
	.param .u64 .ptr .global .align 1 _rms_norm_backward_kernel_param_8,
	.param .u32 _rms_norm_backward_kernel_param_9,
	.param .u32 _rms_norm_backward_kernel_param_10,
	.param .u32 _rms_norm_backward_kernel_param_11,
	.param .f32 _rms_norm_backward_kernel_param_12
)
.reqntid 256, 1, 1
{
	.reg .pred 	%p<31>;
	.reg .b16 	%rs<105>;
	.reg .b32 	%r<208>;
	.reg .f32 	%f<148>;
	.reg .b64 	%rd<45>;
	.loc	1 114 0                         // rms_norm.py:114:0
$L__func_begin0:
	.loc	1 114 0                         // rms_norm.py:114:0

// %bb.0:
	ld.param.u32 	%r32, [_rms_norm_backward_kernel_param_11];
	ld.param.u32 	%r31, [_rms_norm_backward_kernel_param_9];
	ld.param.u64 	%rd20, [_rms_norm_backward_kernel_param_8];
$L__tmp0:
	.loc	1 140 33                        // rms_norm.py:140:33
	// begin inline asm
	mov.u32 %r33, %ctaid.x;
	// end inline asm
	.loc	1 141 31                        // rms_norm.py:141:31
	shl.b32 	%r2, %r33, 3;
	.loc	1 142 39                        // rms_norm.py:142:39
	add.s32 	%r61, %r2, 8;
	ld.param.u32 	%r62, [_rms_norm_backward_kernel_param_10];
	.loc	1 142 57                        // rms_norm.py:142:57
	min.s32 	%r3, %r61, %r62;
	.loc	1 143 31                        // rms_norm.py:143:31
	mov.u32 	%r4, %tid.x;
	shl.b32 	%r63, %r4, 3;
	ld.param.u64 	%rd22, [_rms_norm_backward_kernel_param_6];
	and.b32  	%r5, %r63, 2040;
	.loc	1 144 25                        // rms_norm.py:144:25
	setp.lt.s32 	%p2, %r5, %r32;
	.loc	1 154 28                        // rms_norm.py:154:28
	mul.wide.u32 	%rd23, %r5, 2;
	add.s64 	%rd21, %rd22, %rd23;
	mov.b32 	%r200, 0;
	.loc	1 154 20                        // rms_norm.py:154:20
	// begin inline asm
	mov.u32 %r34, 0x0;
	mov.u32 %r35, 0x0;
	mov.u32 %r36, 0x0;
	mov.u32 %r37, 0x0;
	@%p2 ld.global.v4.b32 { %r34, %r35, %r36, %r37 }, [ %rd21 + 0 ];
	@!%p2 mov.u32 %r34, %r200;
	@!%p2 mov.u32 %r35, %r200;
	@!%p2 mov.u32 %r36, %r200;
	@!%p2 mov.u32 %r37, %r200;
	// end inline asm
	mov.b32 	{%rs9, %rs10}, %r34;
	mov.b32 	{%rs11, %rs12}, %r35;
	mov.b32 	{%rs13, %rs14}, %r36;
	mov.b32 	{%rs15, %rs16}, %r37;
	.loc	1 157 30                        // rms_norm.py:157:30
	setp.le.s32 	%p7, %r3, %r2;
	mov.u32 	%r197, global_smem;
	shl.b32 	%r198, %r4, 2;
	mov.pred 	%p26, -1;
	mov.u32 	%r201, %r200;
	mov.u32 	%r202, %r200;
	mov.u32 	%r203, %r200;
	mov.u32 	%r204, %r200;
	mov.u32 	%r205, %r200;
	mov.u32 	%r206, %r200;
	mov.u32 	%r207, %r200;
	@%p7 bra 	$L__BB0_4;
// %bb.1:                               // %.lr.ph
	.loc	1 0 30                          // rms_norm.py:0:30
	ld.param.u64 	%rd19, [_rms_norm_backward_kernel_param_7];
	ld.param.u32 	%r30, [_rms_norm_backward_kernel_param_5];
	ld.param.u64 	%rd18, [_rms_norm_backward_kernel_param_4];
	ld.param.u32 	%r29, [_rms_norm_backward_kernel_param_3];
	ld.param.u64 	%rd17, [_rms_norm_backward_kernel_param_2];
	ld.param.u32 	%r28, [_rms_norm_backward_kernel_param_1];
	ld.param.u64 	%rd16, [_rms_norm_backward_kernel_param_0];
	ld.param.f32 	%f26, [_rms_norm_backward_kernel_param_12];
	// begin inline asm
	cvt.f32.bf16 %r42, %rs9;
	// end inline asm
	mov.b32 	%f27, %r42;
	// begin inline asm
	cvt.f32.bf16 %r43, %rs10;
	// end inline asm
	mov.b32 	%f28, %r43;
	// begin inline asm
	cvt.f32.bf16 %r44, %rs11;
	// end inline asm
	mov.b32 	%f29, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs12;
	// end inline asm
	mov.b32 	%f30, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs13;
	// end inline asm
	mov.b32 	%f31, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs14;
	// end inline asm
	mov.b32 	%f32, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs15;
	// end inline asm
	mov.b32 	%f33, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs16;
	// end inline asm
	mov.b32 	%f34, %r49;
	add.f32 	%f1, %f26, %f27;
	add.f32 	%f2, %f26, %f28;
	add.f32 	%f3, %f26, %f29;
	add.f32 	%f4, %f26, %f30;
	add.f32 	%f5, %f26, %f31;
	add.f32 	%f6, %f26, %f32;
	add.f32 	%f7, %f26, %f33;
	add.f32 	%f8, %f26, %f34;
	cvt.rn.f32.s32 	%f35, %r32;
	mov.b32 	%r52, %f35;
	mov.b32 	%r51, 1065353216;
	// begin inline asm
	div.full.f32 %r50, %r51, %r52;
	// end inline asm
	mov.b32 	%f36, %r50;
	mov.f32 	%f140, 0f00000000;
	sub.f32 	%f9, %f140, %f36;
	.loc	1 152 16                        // rms_norm.py:152:16
	mul.wide.s32 	%rd24, %r2, 4;
	add.s64 	%rd44, %rd19, %rd24;
	.loc	1 151 25                        // rms_norm.py:151:25
	mul.lo.s32 	%r68, %r2, %r30;
	.loc	1 149 26                        // rms_norm.py:149:26
	mul.lo.s32 	%r69, %r2, %r29;
	.loc	1 148 26                        // rms_norm.py:148:26
	mul.lo.s32 	%r70, %r2, %r28;
	.loc	1 143 31                        // rms_norm.py:143:31
	and.b32  	%r6, %r4, 31;
	shr.u32 	%r71, %r4, 3;
	and.b32  	%r72, %r71, 28;
	add.s32 	%r110, %r197, %r72;
	setp.lt.s32 	%p8, %r4, 8;
	add.s32 	%r113, %r197, %r198;
	and.b32  	%r75, %r4, 7;
	setp.eq.s32 	%p9, %r75, 0;
	and.pred  	%p23, %p8, %p9;
	.loc	1 157 30                        // rms_norm.py:157:30
	and.b32  	%r76, %r4, 255;
	mul.wide.u32 	%rd25, %r76, 16;
	mul.wide.s32 	%rd26, %r68, 2;
	add.s64 	%rd27, %rd25, %rd26;
	add.s64 	%rd43, %rd18, %rd27;
	mul.wide.s32 	%rd3, %r30, 2;
	mul.wide.s32 	%rd28, %r69, 2;
	add.s64 	%rd29, %rd25, %rd28;
	add.s64 	%rd42, %rd17, %rd29;
	mul.wide.s32 	%rd5, %r29, 2;
	mul.wide.s32 	%rd30, %r70, 2;
	add.s64 	%rd31, %rd25, %rd30;
	add.s64 	%rd41, %rd16, %rd31;
	mul.wide.s32 	%rd7, %r28, 2;
	sub.s32 	%r199, %r3, %r2;
	mov.f32 	%f141, %f140;
	mov.f32 	%f142, %f140;
	mov.f32 	%f143, %f140;
	mov.f32 	%f144, %f140;
	mov.f32 	%f145, %f140;
	mov.f32 	%f146, %f140;
	mov.f32 	%f147, %f140;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	.loc	1 0 30                          // rms_norm.py:0:30
	setp.eq.s32 	%p21, %r6, 0;
	mov.b32 	%r81, 0;
	.loc	1 158 25                        // rms_norm.py:158:25
	// begin inline asm
	mov.u32 %r77, 0x0;
	mov.u32 %r78, 0x0;
	mov.u32 %r79, 0x0;
	mov.u32 %r80, 0x0;
	@%p2 ld.global.v4.b32 { %r77, %r78, %r79, %r80 }, [ %rd41 + 0 ];
	@!%p2 mov.u32 %r77, %r81;
	@!%p2 mov.u32 %r78, %r81;
	@!%p2 mov.u32 %r79, %r81;
	@!%p2 mov.u32 %r80, %r81;
	// end inline asm
	mov.b32 	{%rs25, %rs26}, %r77;
	mov.b32 	{%rs27, %rs28}, %r78;
	mov.b32 	{%rs29, %rs30}, %r79;
	mov.b32 	{%rs31, %rs32}, %r80;
	.loc	1 159 24                        // rms_norm.py:159:24
	// begin inline asm
	mov.u32 %r85, 0x0;
	mov.u32 %r86, 0x0;
	mov.u32 %r87, 0x0;
	mov.u32 %r88, 0x0;
	@%p2 ld.global.v4.b32 { %r85, %r86, %r87, %r88 }, [ %rd43 + 0 ];
	@!%p2 mov.u32 %r85, %r81;
	@!%p2 mov.u32 %r86, %r81;
	@!%p2 mov.u32 %r87, %r81;
	@!%p2 mov.u32 %r88, %r81;
	// end inline asm
	mov.b32 	{%rs89, %rs90}, %r85;
	mov.b32 	{%rs91, %rs92}, %r86;
	mov.b32 	{%rs93, %rs94}, %r87;
	mov.b32 	{%rs95, %rs96}, %r88;
	.loc	1 162 27                        // rms_norm.py:162:27
	// begin inline asm
	mov.u32 %r93, 0x0;
	@%p26 ld.global.b32 { %r93 }, [ %rd44 + 0 ];
	// end inline asm
	mov.b32 	%f46, %r93;
	.loc	1 164 25                        // rms_norm.py:164:25
	// begin inline asm
	cvt.f32.bf16 %r94, %rs89;
	// end inline asm
	mov.b32 	%f47, %r94;
	// begin inline asm
	cvt.f32.bf16 %r95, %rs90;
	// end inline asm
	mov.b32 	%f48, %r95;
	// begin inline asm
	cvt.f32.bf16 %r96, %rs91;
	// end inline asm
	mov.b32 	%f49, %r96;
	// begin inline asm
	cvt.f32.bf16 %r97, %rs92;
	// end inline asm
	mov.b32 	%f50, %r97;
	// begin inline asm
	cvt.f32.bf16 %r98, %rs93;
	// end inline asm
	mov.b32 	%f51, %r98;
	// begin inline asm
	cvt.f32.bf16 %r99, %rs94;
	// end inline asm
	mov.b32 	%f52, %r99;
	// begin inline asm
	cvt.f32.bf16 %r100, %rs95;
	// end inline asm
	mov.b32 	%f53, %r100;
	// begin inline asm
	cvt.f32.bf16 %r101, %rs96;
	// end inline asm
	mov.b32 	%f54, %r101;
	.loc	1 168 26                        // rms_norm.py:168:26
	// begin inline asm
	cvt.f32.bf16 %r102, %rs25;
	// end inline asm
	mov.b32 	%f55, %r102;
	// begin inline asm
	cvt.f32.bf16 %r103, %rs26;
	// end inline asm
	mov.b32 	%f56, %r103;
	// begin inline asm
	cvt.f32.bf16 %r104, %rs27;
	// end inline asm
	mov.b32 	%f57, %r104;
	// begin inline asm
	cvt.f32.bf16 %r105, %rs28;
	// end inline asm
	mov.b32 	%f58, %r105;
	// begin inline asm
	cvt.f32.bf16 %r106, %rs29;
	// end inline asm
	mov.b32 	%f59, %r106;
	// begin inline asm
	cvt.f32.bf16 %r107, %rs30;
	// end inline asm
	mov.b32 	%f60, %r107;
	// begin inline asm
	cvt.f32.bf16 %r108, %rs31;
	// end inline asm
	mov.b32 	%f61, %r108;
	// begin inline asm
	cvt.f32.bf16 %r109, %rs32;
	// end inline asm
	mov.b32 	%f62, %r109;
	mul.f32 	%f63, %f1, %f55;
	mul.f32 	%f64, %f2, %f56;
	mul.f32 	%f65, %f3, %f57;
	mul.f32 	%f66, %f4, %f58;
	mul.f32 	%f67, %f5, %f59;
	mul.f32 	%f68, %f6, %f60;
	mul.f32 	%f69, %f7, %f61;
	mul.f32 	%f70, %f8, %f62;
	.loc	1 178 48                        // rms_norm.py:178:48
	mul.f32 	%f71, %f9, %f46;
	.loc	1 178 59                        // rms_norm.py:178:59
	mul.f32 	%f72, %f71, %f46;
	.loc	1 178 81                        // rms_norm.py:178:81
	mul.f32 	%f73, %f48, %f64;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	.loc	2 256 15                        // standard.py:256:15
	fma.rn.f32 	%f74, %f47, %f63, %f73;
	fma.rn.f32 	%f75, %f49, %f65, %f74;
	fma.rn.f32 	%f76, %f50, %f66, %f75;
	fma.rn.f32 	%f77, %f51, %f67, %f76;
	fma.rn.f32 	%f78, %f52, %f68, %f77;
	fma.rn.f32 	%f79, %f53, %f69, %f78;
	fma.rn.f32 	%f80, %f54, %f70, %f79;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r152, %f80;
	shfl.sync.bfly.b32	%r153, %r152, 16, 31, -1;
	mov.b32 	%f81, %r153;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f82, %f80, %f81;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r154, %f82;
	shfl.sync.bfly.b32	%r155, %r154, 8, 31, -1;
	mov.b32 	%f83, %r155;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f84, %f82, %f83;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r156, %f84;
	shfl.sync.bfly.b32	%r157, %r156, 4, 31, -1;
	mov.b32 	%f85, %r157;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f86, %f84, %f85;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r158, %f86;
	shfl.sync.bfly.b32	%r159, %r158, 2, 31, -1;
	mov.b32 	%f87, %r159;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f88, %f86, %f87;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r160, %f88;
	shfl.sync.bfly.b32	%r161, %r160, 1, 31, -1;
	mov.b32 	%f89, %r161;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f90, %f88, %f89;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r111, %f90;
	// begin inline asm
	@%p21 st.shared.b32 [ %r110 + 0 ], %r111;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p8 ld.shared.b32 %r112, [ %r113 + 0 ];
	// end inline asm
	mov.b32 	%f91, %r112;
	shfl.sync.bfly.b32	%r162, %r112, 4, 31, -1;
	mov.b32 	%f92, %r162;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f93, %f91, %f92;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r163, %f93;
	shfl.sync.bfly.b32	%r164, %r163, 2, 31, -1;
	mov.b32 	%f94, %r164;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f95, %f93, %f94;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r165, %f95;
	shfl.sync.bfly.b32	%r166, %r165, 1, 31, -1;
	mov.b32 	%f96, %r166;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f97, %f95, %f96;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r115, %f97;
	// begin inline asm
	@%p23 st.shared.b32 [ %r113 + 0 ], %r115;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f98, [global_smem];
$L__tmp2:
	.loc	1 178 70                        // rms_norm.py:178:70
	mul.f32 	%f99, %f72, %f98;
	.loc	1 178 98                        // rms_norm.py:178:98
	mul.f32 	%f100, %f47, %f99;
	mul.f32 	%f101, %f48, %f99;
	mul.f32 	%f102, %f49, %f99;
	mul.f32 	%f103, %f50, %f99;
	mul.f32 	%f104, %f51, %f99;
	mul.f32 	%f105, %f52, %f99;
	mul.f32 	%f106, %f53, %f99;
	mul.f32 	%f107, %f54, %f99;
	.loc	1 178 32                        // rms_norm.py:178:32
	mul.f32 	%f108, %f100, %f46;
	mul.f32 	%f109, %f101, %f46;
	mul.f32 	%f110, %f102, %f46;
	mul.f32 	%f111, %f103, %f46;
	mul.f32 	%f112, %f104, %f46;
	mul.f32 	%f113, %f105, %f46;
	mul.f32 	%f114, %f106, %f46;
	mul.f32 	%f115, %f107, %f46;
	.loc	1 178 18                        // rms_norm.py:178:18
	fma.rn.f32 	%f116, %f63, %f46, %f108;
	fma.rn.f32 	%f117, %f64, %f46, %f109;
	fma.rn.f32 	%f118, %f65, %f46, %f110;
	fma.rn.f32 	%f119, %f66, %f46, %f111;
	fma.rn.f32 	%f120, %f67, %f46, %f112;
	fma.rn.f32 	%f121, %f68, %f46, %f113;
	fma.rn.f32 	%f122, %f69, %f46, %f114;
	fma.rn.f32 	%f123, %f70, %f46, %f115;
	.loc	1 182 40                        // rms_norm.py:182:40
	mul.f32 	%f124, %f47, %f46;
	mul.f32 	%f125, %f48, %f46;
	mul.f32 	%f126, %f49, %f46;
	mul.f32 	%f127, %f50, %f46;
	mul.f32 	%f128, %f51, %f46;
	mul.f32 	%f129, %f52, %f46;
	mul.f32 	%f130, %f53, %f46;
	mul.f32 	%f131, %f54, %f46;
	.loc	1 182 53                        // rms_norm.py:182:53
	mov.b32 	%r116, %f124;
	// begin inline asm
	cvt.rn.bf16.f32 %rs33, %r116;
	// end inline asm
	mov.b32 	%r117, %f125;
	// begin inline asm
	cvt.rn.bf16.f32 %rs34, %r117;
	// end inline asm
	mov.b32 	%r118, %f126;
	// begin inline asm
	cvt.rn.bf16.f32 %rs35, %r118;
	// end inline asm
	mov.b32 	%r119, %f127;
	// begin inline asm
	cvt.rn.bf16.f32 %rs36, %r119;
	// end inline asm
	mov.b32 	%r120, %f128;
	// begin inline asm
	cvt.rn.bf16.f32 %rs37, %r120;
	// end inline asm
	mov.b32 	%r121, %f129;
	// begin inline asm
	cvt.rn.bf16.f32 %rs38, %r121;
	// end inline asm
	mov.b32 	%r122, %f130;
	// begin inline asm
	cvt.rn.bf16.f32 %rs39, %r122;
	// end inline asm
	mov.b32 	%r123, %f131;
	// begin inline asm
	cvt.rn.bf16.f32 %rs40, %r123;
	// end inline asm
	.loc	1 182 31                        // rms_norm.py:182:31
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs41, %rs25, %rs33, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs44, %rs26, %rs34, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs47, %rs27, %rs35, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs50, %rs28, %rs36, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs53, %rs29, %rs37, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs56, %rs30, %rs38, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs59, %rs31, %rs39, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs62, %rs32, %rs40, c; } 

	// end inline asm
	.loc	1 182 22                        // rms_norm.py:182:22
	// begin inline asm
	cvt.f32.bf16 %r124, %rs41;
	// end inline asm
	mov.b32 	%f132, %r124;
	// begin inline asm
	cvt.f32.bf16 %r125, %rs44;
	// end inline asm
	mov.b32 	%f133, %r125;
	// begin inline asm
	cvt.f32.bf16 %r126, %rs47;
	// end inline asm
	mov.b32 	%f134, %r126;
	// begin inline asm
	cvt.f32.bf16 %r127, %rs50;
	// end inline asm
	mov.b32 	%f135, %r127;
	// begin inline asm
	cvt.f32.bf16 %r128, %rs53;
	// end inline asm
	mov.b32 	%f136, %r128;
	// begin inline asm
	cvt.f32.bf16 %r129, %rs56;
	// end inline asm
	mov.b32 	%f137, %r129;
	// begin inline asm
	cvt.f32.bf16 %r130, %rs59;
	// end inline asm
	mov.b32 	%f138, %r130;
	// begin inline asm
	cvt.f32.bf16 %r131, %rs62;
	// end inline asm
	mov.b32 	%f139, %r131;
	add.f32 	%f147, %f147, %f139;
	add.f32 	%f146, %f146, %f138;
	add.f32 	%f145, %f145, %f137;
	add.f32 	%f144, %f144, %f136;
	add.f32 	%f143, %f143, %f135;
	add.f32 	%f142, %f142, %f134;
	add.f32 	%f141, %f141, %f133;
	add.f32 	%f140, %f140, %f132;
	.loc	1 187 49                        // rms_norm.py:187:49
	mov.b32 	%r132, %f116;
	// begin inline asm
	cvt.rn.bf16.f32 %rs73, %r132;
	// end inline asm
	mov.b32 	%r133, %f117;
	// begin inline asm
	cvt.rn.bf16.f32 %rs74, %r133;
	// end inline asm
	mov.b32 	%r134, %f118;
	// begin inline asm
	cvt.rn.bf16.f32 %rs75, %r134;
	// end inline asm
	mov.b32 	%r135, %f119;
	// begin inline asm
	cvt.rn.bf16.f32 %rs76, %r135;
	// end inline asm
	mov.b32 	%r136, %f120;
	// begin inline asm
	cvt.rn.bf16.f32 %rs77, %r136;
	// end inline asm
	mov.b32 	%r137, %f121;
	// begin inline asm
	cvt.rn.bf16.f32 %rs78, %r137;
	// end inline asm
	mov.b32 	%r138, %f122;
	// begin inline asm
	cvt.rn.bf16.f32 %rs79, %r138;
	// end inline asm
	mov.b32 	%r139, %f123;
	// begin inline asm
	cvt.rn.bf16.f32 %rs80, %r139;
	// end inline asm
	.loc	1 187 39                        // rms_norm.py:187:39
	mov.b32 	%r167, {%rs73, %rs74};
	mov.b32 	%r168, {%rs75, %rs76};
	mov.b32 	%r169, {%rs77, %rs78};
	mov.b32 	%r170, {%rs79, %rs80};
	// begin inline asm
	@%p2 st.global.v4.b32 [ %rd42 + 0 ], { %r167, %r168, %r169, %r170 };
	// end inline asm
	.loc	1 192 20                        // rms_norm.py:192:20
	add.s64 	%rd44, %rd44, 4;
	.loc	1 157 30                        // rms_norm.py:157:30
	add.s64 	%rd43, %rd43, %rd3;
	add.s64 	%rd42, %rd42, %rd5;
	add.s64 	%rd41, %rd41, %rd7;
	add.s32 	%r199, %r199, -1;
	setp.ne.s32 	%p25, %r199, 0;
	@%p25 bra 	$L__BB0_2;
// %bb.3:                               // %._crit_edge.loopexit
	.loc	1 194 66                        // rms_norm.py:194:66
	mov.b32 	%r200, %f140;
	mov.b32 	%r201, %f141;
	mov.b32 	%r202, %f142;
	mov.b32 	%r203, %f143;
	mov.b32 	%r204, %f144;
	mov.b32 	%r205, %f145;
	mov.b32 	%r206, %f146;
	mov.b32 	%r207, %f147;
$L__BB0_4:                              // %._crit_edge
	.loc	1 143 31                        // rms_norm.py:143:31
	and.b32  	%r190, %r198, 1020;
	or.b32  	%r191, %r190, 1024;
	.loc	1 144 25                        // rms_norm.py:144:25
	setp.lt.s32 	%p29, %r191, %r32;
	setp.lt.s32 	%p28, %r190, %r32;
	.loc	1 194 37                        // rms_norm.py:194:37
	mul.lo.s32 	%r192, %r33, %r31;
	.loc	1 194 22                        // rms_norm.py:194:22
	mul.wide.s32 	%rd38, %r192, 4;
	add.s64 	%rd39, %rd20, %rd38;
	.loc	1 194 53                        // rms_norm.py:194:53
	mul.wide.u32 	%rd40, %r190, 4;
	add.s64 	%rd36, %rd39, %rd40;
	add.s64 	%rd37, %rd36, 4096;
	.loc	1 194 66                        // rms_norm.py:194:66
	bar.sync 	0;
	shl.b32 	%r193, %r5, 2;
	add.s32 	%r171, %r197, %r193;
	// begin inline asm
	@%p26 st.shared.v4.b32 [ %r171 + 0 ], { %r200, %r201, %r202, %r203 };
	// end inline asm
	add.s32 	%r176, %r171, 16;
	// begin inline asm
	@%p26 st.shared.v4.b32 [ %r176 + 0 ], { %r204, %r205, %r206, %r207 };
	// end inline asm
	bar.sync 	0;
	shl.b32 	%r195, %r190, 2;
	add.s32 	%r196, %r197, %r195;
	ld.shared.v4.u32 	{%r185, %r186, %r187, %r188}, [%r196+4096];
	ld.shared.v4.u32 	{%r181, %r182, %r183, %r184}, [%r196];
	// begin inline asm
	@%p28 st.global.v4.b32 [ %rd36 + 0 ], { %r181, %r182, %r183, %r184 };
	// end inline asm
	// begin inline asm
	@%p29 st.global.v4.b32 [ %rd37 + 0 ], { %r185, %r186, %r187, %r188 };
	// end inline asm
	.loc	1 194 4                         // rms_norm.py:194:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/root/miniconda3/lib/python3.12/site-packages/liger_kernel/ops/rms_norm.py"
	.file	2 "/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 171                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xa4 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 114                                 // DW_AT_name
.b8 109
.b8 115
.b8 95
.b8 110
.b8 111
.b8 114
.b8 109
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 50
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 108
.b8 105
.b8 103
.b8 101
.b8 114
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 47
.b8 111
.b8 112
.b8 115
.b8 0
.b8 2                                   // Abbrev [2] 0x64:0x1c DW_TAG_subprogram
.b8 95                                  // DW_AT_name
.b8 114
.b8 109
.b8 115
.b8 95
.b8 110
.b8 111
.b8 114
.b8 109
.b8 95
.b8 98
.b8 97
.b8 99
.b8 107
.b8 119
.b8 97
.b8 114
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x80:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 100                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x95:0x18 DW_TAG_inlined_subroutine
.b32 100                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 178                                 // DW_AT_call_line
.b8 77                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
