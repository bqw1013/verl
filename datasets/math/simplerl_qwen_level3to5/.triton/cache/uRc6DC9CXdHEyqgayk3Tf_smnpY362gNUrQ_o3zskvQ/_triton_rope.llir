; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @_triton_rope(ptr addrspace(1) %0, i32 %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) %4, i32 %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = mul i32 %10, %1, !dbg !11
  %12 = sext i32 %11 to i64, !dbg !12
  %13 = getelementptr bfloat, ptr addrspace(1) %0, i64 %12, !dbg !12
  %14 = mul i32 %10, %3, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr bfloat, ptr addrspace(1) %2, i64 %15, !dbg !14
  %17 = srem i32 %10, %8, !dbg !15
  %18 = mul i32 %17, %5, !dbg !16
  %19 = sext i32 %18 to i64, !dbg !17
  %20 = getelementptr bfloat, ptr addrspace(1) %4, i64 %19, !dbg !17
  %21 = mul i32 %17, %7, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr bfloat, ptr addrspace(1) %6, i64 %22, !dbg !19
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !20
  %25 = shl i32 %24, 3, !dbg !20
  %26 = and i32 %25, 56, !dbg !20
  %27 = and i32 %24, 63, !dbg !20
  %28 = zext nneg i32 %26 to i64, !dbg !21
  %29 = getelementptr bfloat, ptr addrspace(1) %20, i64 %28, !dbg !21
  %30 = zext nneg i32 %27 to i64, !dbg !21
  %31 = getelementptr bfloat, ptr addrspace(1) %20, i64 %30, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #1, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %34 = bitcast i32 %33 to <2 x bfloat>, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %36 = bitcast i32 %35 to <2 x bfloat>, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %38 = bitcast i32 %37 to <2 x bfloat>, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %40 = bitcast i32 %39 to <2 x bfloat>, !dbg !22
  %41 = extractelement <2 x bfloat> %34, i64 0, !dbg !22
  %42 = extractelement <2 x bfloat> %34, i64 1, !dbg !22
  %43 = extractelement <2 x bfloat> %36, i64 0, !dbg !22
  %44 = extractelement <2 x bfloat> %36, i64 1, !dbg !22
  %45 = extractelement <2 x bfloat> %38, i64 0, !dbg !22
  %46 = extractelement <2 x bfloat> %38, i64 1, !dbg !22
  %47 = extractelement <2 x bfloat> %40, i64 0, !dbg !22
  %48 = extractelement <2 x bfloat> %40, i64 1, !dbg !22
  %49 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %31, i1 true, i16 0, i1 true) #1, !dbg !22
  %50 = bitcast i16 %49 to bfloat, !dbg !22
  %51 = getelementptr bfloat, ptr addrspace(1) %23, i64 %28, !dbg !23
  %52 = getelementptr bfloat, ptr addrspace(1) %23, i64 %30, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %55 = bitcast i32 %54 to <2 x bfloat>, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %57 = bitcast i32 %56 to <2 x bfloat>, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %59 = bitcast i32 %58 to <2 x bfloat>, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %61 = bitcast i32 %60 to <2 x bfloat>, !dbg !24
  %62 = extractelement <2 x bfloat> %55, i64 0, !dbg !24
  %63 = extractelement <2 x bfloat> %55, i64 1, !dbg !24
  %64 = extractelement <2 x bfloat> %57, i64 0, !dbg !24
  %65 = extractelement <2 x bfloat> %57, i64 1, !dbg !24
  %66 = extractelement <2 x bfloat> %59, i64 0, !dbg !24
  %67 = extractelement <2 x bfloat> %59, i64 1, !dbg !24
  %68 = extractelement <2 x bfloat> %61, i64 0, !dbg !24
  %69 = extractelement <2 x bfloat> %61, i64 1, !dbg !24
  %70 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %52, i1 true, i16 0, i1 true) #1, !dbg !24
  %71 = bitcast i16 %70 to bfloat, !dbg !24
  %72 = lshr i32 %24, 3, !dbg !25
  %73 = and i32 %72, 15, !dbg !25
  %74 = shl nuw nsw i32 %73, 7, !dbg !26
  %75 = or disjoint i32 %74, %26, !dbg !27
  %76 = shl i32 %24, 1, !dbg !28
  %77 = and i32 %76, 128, !dbg !28
  %78 = or disjoint i32 %77, %27, !dbg !29
  %79 = icmp samesign ult i32 %73, 12, !dbg !30
  %80 = zext nneg i32 %75 to i64, !dbg !31
  %81 = getelementptr bfloat, ptr addrspace(1) %13, i64 %80, !dbg !31
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #1, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !32
  %84 = bitcast i32 %83 to <2 x bfloat>, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !32
  %86 = bitcast i32 %85 to <2 x bfloat>, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !32
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !32
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !32
  %91 = extractelement <2 x bfloat> %84, i64 0, !dbg !32
  %92 = extractelement <2 x bfloat> %84, i64 1, !dbg !32
  %93 = extractelement <2 x bfloat> %86, i64 0, !dbg !32
  %94 = extractelement <2 x bfloat> %86, i64 1, !dbg !32
  %95 = extractelement <2 x bfloat> %88, i64 0, !dbg !32
  %96 = extractelement <2 x bfloat> %88, i64 1, !dbg !32
  %97 = extractelement <2 x bfloat> %90, i64 0, !dbg !32
  %98 = extractelement <2 x bfloat> %90, i64 1, !dbg !32
  %99 = zext nneg i32 %78 to i64, !dbg !33
  %100 = getelementptr bfloat, ptr addrspace(1) %16, i64 %99, !dbg !33
  %101 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %100, i1 true, i16 0, i1 true) #1, !dbg !34
  %102 = bitcast i16 %101 to bfloat, !dbg !34
  %103 = or disjoint i32 %75, 64, !dbg !35
  %104 = or disjoint i32 %78, 64, !dbg !36
  %105 = zext nneg i32 %103 to i64, !dbg !37
  %106 = getelementptr bfloat, ptr addrspace(1) %13, i64 %105, !dbg !37
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #1, !dbg !38
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !38
  %109 = bitcast i32 %108 to <2 x bfloat>, !dbg !38
  %110 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !38
  %111 = bitcast i32 %110 to <2 x bfloat>, !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !38
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !38
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !38
  %116 = extractelement <2 x bfloat> %109, i64 0, !dbg !38
  %117 = extractelement <2 x bfloat> %109, i64 1, !dbg !38
  %118 = extractelement <2 x bfloat> %111, i64 0, !dbg !38
  %119 = extractelement <2 x bfloat> %111, i64 1, !dbg !38
  %120 = extractelement <2 x bfloat> %113, i64 0, !dbg !38
  %121 = extractelement <2 x bfloat> %113, i64 1, !dbg !38
  %122 = extractelement <2 x bfloat> %115, i64 0, !dbg !38
  %123 = extractelement <2 x bfloat> %115, i64 1, !dbg !38
  %124 = zext nneg i32 %104 to i64, !dbg !39
  %125 = getelementptr bfloat, ptr addrspace(1) %16, i64 %124, !dbg !39
  %126 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %125, i1 true, i16 0, i1 true) #1, !dbg !40
  %127 = bitcast i16 %126 to bfloat, !dbg !40
  %128 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %91, bfloat %41) #1, !dbg !41
  %129 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %92, bfloat %42) #1, !dbg !41
  %130 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %93, bfloat %43) #1, !dbg !41
  %131 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %94, bfloat %44) #1, !dbg !41
  %132 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %95, bfloat %45) #1, !dbg !41
  %133 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %96, bfloat %46) #1, !dbg !41
  %134 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %97, bfloat %47) #1, !dbg !41
  %135 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %98, bfloat %48) #1, !dbg !41
  %136 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %116, bfloat %62) #1, !dbg !42
  %137 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %117, bfloat %63) #1, !dbg !42
  %138 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %118, bfloat %64) #1, !dbg !42
  %139 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %119, bfloat %65) #1, !dbg !42
  %140 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %120, bfloat %66) #1, !dbg !42
  %141 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %121, bfloat %67) #1, !dbg !42
  %142 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %122, bfloat %68) #1, !dbg !42
  %143 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %123, bfloat %69) #1, !dbg !42
  %144 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %128, bfloat %136) #1, !dbg !43
  %145 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %129, bfloat %137) #1, !dbg !43
  %146 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %130, bfloat %138) #1, !dbg !43
  %147 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %131, bfloat %139) #1, !dbg !43
  %148 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %132, bfloat %140) #1, !dbg !43
  %149 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %133, bfloat %141) #1, !dbg !43
  %150 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %134, bfloat %142) #1, !dbg !43
  %151 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %135, bfloat %143) #1, !dbg !43
  %152 = insertelement <2 x bfloat> poison, bfloat %144, i64 0, !dbg !44
  %153 = insertelement <2 x bfloat> %152, bfloat %145, i64 1, !dbg !44
  %154 = bitcast <2 x bfloat> %153 to i32, !dbg !44
  %155 = insertelement <2 x bfloat> poison, bfloat %146, i64 0, !dbg !44
  %156 = insertelement <2 x bfloat> %155, bfloat %147, i64 1, !dbg !44
  %157 = bitcast <2 x bfloat> %156 to i32, !dbg !44
  %158 = insertelement <2 x bfloat> poison, bfloat %148, i64 0, !dbg !44
  %159 = insertelement <2 x bfloat> %158, bfloat %149, i64 1, !dbg !44
  %160 = bitcast <2 x bfloat> %159 to i32, !dbg !44
  %161 = insertelement <2 x bfloat> poison, bfloat %150, i64 0, !dbg !44
  %162 = insertelement <2 x bfloat> %161, bfloat %151, i64 1, !dbg !44
  %163 = bitcast <2 x bfloat> %162 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %157, i32 %160, i32 %163, ptr addrspace(1) %81, i1 %79) #1, !dbg !44
  %164 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %116, bfloat %41) #1, !dbg !45
  %165 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %117, bfloat %42) #1, !dbg !45
  %166 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %118, bfloat %43) #1, !dbg !45
  %167 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %119, bfloat %44) #1, !dbg !45
  %168 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %120, bfloat %45) #1, !dbg !45
  %169 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %121, bfloat %46) #1, !dbg !45
  %170 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %122, bfloat %47) #1, !dbg !45
  %171 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %123, bfloat %48) #1, !dbg !45
  %172 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %91, bfloat %62) #1, !dbg !46
  %173 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %92, bfloat %63) #1, !dbg !46
  %174 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %93, bfloat %64) #1, !dbg !46
  %175 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %94, bfloat %65) #1, !dbg !46
  %176 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %95, bfloat %66) #1, !dbg !46
  %177 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %96, bfloat %67) #1, !dbg !46
  %178 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %97, bfloat %68) #1, !dbg !46
  %179 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %98, bfloat %69) #1, !dbg !46
  %180 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %164, bfloat %172) #1, !dbg !47
  %181 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %165, bfloat %173) #1, !dbg !47
  %182 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %166, bfloat %174) #1, !dbg !47
  %183 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %167, bfloat %175) #1, !dbg !47
  %184 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %168, bfloat %176) #1, !dbg !47
  %185 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %169, bfloat %177) #1, !dbg !47
  %186 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %170, bfloat %178) #1, !dbg !47
  %187 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %171, bfloat %179) #1, !dbg !47
  %188 = insertelement <2 x bfloat> poison, bfloat %180, i64 0, !dbg !48
  %189 = insertelement <2 x bfloat> %188, bfloat %181, i64 1, !dbg !48
  %190 = bitcast <2 x bfloat> %189 to i32, !dbg !48
  %191 = insertelement <2 x bfloat> poison, bfloat %182, i64 0, !dbg !48
  %192 = insertelement <2 x bfloat> %191, bfloat %183, i64 1, !dbg !48
  %193 = bitcast <2 x bfloat> %192 to i32, !dbg !48
  %194 = insertelement <2 x bfloat> poison, bfloat %184, i64 0, !dbg !48
  %195 = insertelement <2 x bfloat> %194, bfloat %185, i64 1, !dbg !48
  %196 = bitcast <2 x bfloat> %195 to i32, !dbg !48
  %197 = insertelement <2 x bfloat> poison, bfloat %186, i64 0, !dbg !48
  %198 = insertelement <2 x bfloat> %197, bfloat %187, i64 1, !dbg !48
  %199 = bitcast <2 x bfloat> %198 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %190, i32 %193, i32 %196, i32 %199, ptr addrspace(1) %106, i1 %79) #1, !dbg !48
  %200 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %102, bfloat %50) #1, !dbg !49
  %201 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %127, bfloat %71) #1, !dbg !50
  %202 = tail call bfloat asm " { .reg .b16 c;         \0A    mov.b16 c, 0xbf80U; \0A    fma.rn.bf16 $0, $2, c, $1;} \0A", "=h,h,h"(bfloat %200, bfloat %201) #1, !dbg !51
  %203 = bitcast bfloat %202 to i16, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %203, ptr addrspace(1) %100, i1 true) #1, !dbg !52
  %204 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %127, bfloat %50) #1, !dbg !53
  %205 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %102, bfloat %71) #1, !dbg !54
  %206 = tail call bfloat asm "{ .reg .b16 c;         \0A   mov.b16 c, 0x3f80U; \0A   fma.rn.bf16 $0, $1, c, $2; } \0A", "=h,h,h"(bfloat %204, bfloat %205) #1, !dbg !55
  %207 = bitcast bfloat %206 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %207, ptr addrspace(1) %125, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rope.py", directory: "/root/miniconda3/lib/python3.12/site-packages/liger_kernel/ops")
!4 = !{ptr @_triton_rope, !"kernel", i32 1}
!5 = !{ptr @_triton_rope, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_triton_rope", linkageName: "_triton_rope", scope: !3, file: !3, line: 7, type: !8, scopeLine: 7, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 35, column: 24, scope: !7)
!11 = !DILocation(line: 38, column: 26, scope: !7)
!12 = !DILocation(line: 38, column: 20, scope: !7)
!13 = !DILocation(line: 39, column: 26, scope: !7)
!14 = !DILocation(line: 39, column: 20, scope: !7)
!15 = !DILocation(line: 53, column: 24, scope: !7)
!16 = !DILocation(line: 56, column: 22, scope: !7)
!17 = !DILocation(line: 54, column: 16, scope: !7)
!18 = !DILocation(line: 61, column: 22, scope: !7)
!19 = !DILocation(line: 59, column: 16, scope: !7)
!20 = !DILocation(line: 65, column: 31, scope: !7)
!21 = !DILocation(line: 67, column: 28, scope: !7)
!22 = !DILocation(line: 67, column: 22, scope: !7)
!23 = !DILocation(line: 68, column: 28, scope: !7)
!24 = !DILocation(line: 68, column: 22, scope: !7)
!25 = !DILocation(line: 75, column: 50, scope: !7)
!26 = !DILocation(line: 75, column: 61, scope: !7)
!27 = !DILocation(line: 75, column: 66, scope: !7)
!28 = !DILocation(line: 76, column: 61, scope: !7)
!29 = !DILocation(line: 76, column: 66, scope: !7)
!30 = !DILocation(line: 77, column: 54, scope: !7)
!31 = !DILocation(line: 79, column: 31, scope: !7)
!32 = !DILocation(line: 79, column: 23, scope: !7)
!33 = !DILocation(line: 80, column: 31, scope: !7)
!34 = !DILocation(line: 80, column: 23, scope: !7)
!35 = !DILocation(line: 83, column: 52, scope: !7)
!36 = !DILocation(line: 84, column: 52, scope: !7)
!37 = !DILocation(line: 87, column: 31, scope: !7)
!38 = !DILocation(line: 87, column: 23, scope: !7)
!39 = !DILocation(line: 88, column: 31, scope: !7)
!40 = !DILocation(line: 88, column: 23, scope: !7)
!41 = !DILocation(line: 92, column: 34, scope: !7)
!42 = !DILocation(line: 92, column: 55, scope: !7)
!43 = !DILocation(line: 92, column: 44, scope: !7)
!44 = !DILocation(line: 93, column: 47, scope: !7)
!45 = !DILocation(line: 94, column: 34, scope: !7)
!46 = !DILocation(line: 94, column: 55, scope: !7)
!47 = !DILocation(line: 94, column: 44, scope: !7)
!48 = !DILocation(line: 95, column: 48, scope: !7)
!49 = !DILocation(line: 97, column: 34, scope: !7)
!50 = !DILocation(line: 97, column: 55, scope: !7)
!51 = !DILocation(line: 97, column: 44, scope: !7)
!52 = !DILocation(line: 98, column: 47, scope: !7)
!53 = !DILocation(line: 99, column: 34, scope: !7)
!54 = !DILocation(line: 99, column: 55, scope: !7)
!55 = !DILocation(line: 99, column: 44, scope: !7)
!56 = !DILocation(line: 100, column: 48, scope: !7)
!57 = !DILocation(line: 90, column: 4, scope: !7)
