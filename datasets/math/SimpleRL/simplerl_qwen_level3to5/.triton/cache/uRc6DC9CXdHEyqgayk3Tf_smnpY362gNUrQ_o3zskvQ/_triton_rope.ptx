//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_89
.address_size 64

	// .globl	_triton_rope            // -- Begin function _triton_rope
                                        // @_triton_rope
.visible .entry _triton_rope(
	.param .u64 .ptr .global .align 1 _triton_rope_param_0,
	.param .u32 _triton_rope_param_1,
	.param .u64 .ptr .global .align 1 _triton_rope_param_2,
	.param .u32 _triton_rope_param_3,
	.param .u64 .ptr .global .align 1 _triton_rope_param_4,
	.param .u32 _triton_rope_param_5,
	.param .u64 .ptr .global .align 1 _triton_rope_param_6,
	.param .u32 _triton_rope_param_7,
	.param .u32 _triton_rope_param_8
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<33>;
	.reg .b16 	%rs<221>;
	.reg .b32 	%r<86>;
	.reg .b64 	%rd<29>;
	.loc	1 7 0                           // rope.py:7:0
$L__func_begin0:
	.loc	1 7 0                           // rope.py:7:0

// %bb.0:
	ld.param.u64 	%rd13, [_triton_rope_param_0];
	ld.param.u32 	%r42, [_triton_rope_param_1];
$L__tmp0:
	.loc	1 35 24                         // rope.py:35:24
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	.loc	1 38 26                         // rope.py:38:26
	mul.lo.s32 	%r43, %r1, %r42;
	ld.param.u64 	%rd14, [_triton_rope_param_2];
	ld.param.u32 	%r44, [_triton_rope_param_3];
	.loc	1 38 20                         // rope.py:38:20
	mul.wide.s32 	%rd15, %r43, 2;
	add.s64 	%rd16, %rd13, %rd15;
	ld.param.u64 	%rd17, [_triton_rope_param_4];
	.loc	1 39 26                         // rope.py:39:26
	mul.lo.s32 	%r45, %r1, %r44;
	ld.param.u32 	%r46, [_triton_rope_param_5];
	ld.param.u64 	%rd18, [_triton_rope_param_6];
	.loc	1 39 20                         // rope.py:39:20
	mul.wide.s32 	%rd19, %r45, 2;
	add.s64 	%rd20, %rd14, %rd19;
	ld.param.u32 	%r47, [_triton_rope_param_7];
	ld.param.u32 	%r48, [_triton_rope_param_8];
	.loc	1 53 24                         // rope.py:53:24
	rem.s32 	%r49, %r1, %r48;
	.loc	1 56 22                         // rope.py:56:22
	mul.lo.s32 	%r50, %r49, %r46;
	.loc	1 54 16                         // rope.py:54:16
	mul.wide.s32 	%rd21, %r50, 2;
	add.s64 	%rd22, %rd17, %rd21;
	.loc	1 61 22                         // rope.py:61:22
	mul.lo.s32 	%r51, %r49, %r47;
	.loc	1 59 16                         // rope.py:59:16
	mul.wide.s32 	%rd23, %r51, 2;
	add.s64 	%rd24, %rd18, %rd23;
	.loc	1 65 31                         // rope.py:65:31
	mov.u32 	%r52, %tid.x;
	shl.b32 	%r53, %r52, 3;
	and.b32  	%r54, %r53, 56;
	and.b32  	%r55, %r52, 63;
	.loc	1 67 28                         // rope.py:67:28
	mul.wide.u32 	%rd25, %r54, 2;
	add.s64 	%rd1, %rd22, %rd25;
	mul.wide.u32 	%rd26, %r55, 2;
	add.s64 	%rd2, %rd22, %rd26;
	mov.b32 	%r6, 0;
	mov.pred 	%p1, -1;
	.loc	1 67 22                         // rope.py:67:22
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	@%p1 ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r2, %r6;
	@!%p1 mov.u32 %r3, %r6;
	@!%p1 mov.u32 %r4, %r6;
	@!%p1 mov.u32 %r5, %r6;
	// end inline asm
	mov.b32 	{%rs11, %rs14}, %r2;
	mov.b32 	{%rs17, %rs20}, %r3;
	mov.b32 	{%rs23, %rs26}, %r4;
	mov.b32 	{%rs29, %rs32}, %r5;
	mov.u16 	%rs2, 0;
	// begin inline asm
	mov.u16 %rs155, 0x0;
	@%p1 ld.global.b16 { %rs155 }, [ %rd2 + 0 ];
	@!%p1 mov.u16 %rs155, %rs2;
	// end inline asm
	.loc	1 68 28                         // rope.py:68:28
	add.s64 	%rd3, %rd24, %rd25;
	add.s64 	%rd4, %rd24, %rd26;
	.loc	1 68 22                         // rope.py:68:22
	// begin inline asm
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	@%p1 ld.global.v4.b32 { %r10, %r11, %r12, %r13 }, [ %rd3 + 0 ];
	@!%p1 mov.u32 %r10, %r6;
	@!%p1 mov.u32 %r11, %r6;
	@!%p1 mov.u32 %r12, %r6;
	@!%p1 mov.u32 %r13, %r6;
	// end inline asm
	mov.b32 	{%rs35, %rs38}, %r10;
	mov.b32 	{%rs41, %rs44}, %r11;
	mov.b32 	{%rs47, %rs50}, %r12;
	mov.b32 	{%rs53, %rs56}, %r13;
	// begin inline asm
	mov.u16 %rs158, 0x0;
	@%p1 ld.global.b16 { %rs158 }, [ %rd4 + 0 ];
	@!%p1 mov.u16 %rs158, %rs2;
	// end inline asm
	.loc	1 75 50                         // rope.py:75:50
	bfe.u32 	%r64, %r52, 3, 4;
	.loc	1 75 61                         // rope.py:75:61
	shl.b32 	%r65, %r64, 7;
	.loc	1 75 66                         // rope.py:75:66
	or.b32  	%r66, %r65, %r54;
	.loc	1 76 61                         // rope.py:76:61
	shl.b32 	%r67, %r52, 1;
	and.b32  	%r68, %r67, 128;
	.loc	1 76 66                         // rope.py:76:66
	or.b32  	%r69, %r68, %r55;
	.loc	1 77 54                         // rope.py:77:54
	setp.lt.u32 	%p15, %r64, 12;
	.loc	1 79 31                         // rope.py:79:31
	mul.wide.u32 	%rd27, %r66, 2;
	add.s64 	%rd5, %rd16, %rd27;
	.loc	1 79 23                         // rope.py:79:23
	// begin inline asm
	mov.u32 %r18, 0x0;
	mov.u32 %r19, 0x0;
	mov.u32 %r20, 0x0;
	mov.u32 %r21, 0x0;
	@%p15 ld.global.v4.b32 { %r18, %r19, %r20, %r21 }, [ %rd5 + 0 ];
	@!%p15 mov.u32 %r18, %r6;
	@!%p15 mov.u32 %r19, %r6;
	@!%p15 mov.u32 %r20, %r6;
	@!%p15 mov.u32 %r21, %r6;
	// end inline asm
	mov.b32 	{%rs10, %rs13}, %r18;
	mov.b32 	{%rs16, %rs19}, %r19;
	mov.b32 	{%rs22, %rs25}, %r20;
	mov.b32 	{%rs28, %rs31}, %r21;
	.loc	1 80 31                         // rope.py:80:31
	mul.wide.u32 	%rd28, %r69, 2;
	add.s64 	%rd6, %rd20, %rd28;
	.loc	1 80 23                         // rope.py:80:23
	// begin inline asm
	mov.u16 %rs154, 0x0;
	@%p1 ld.global.b16 { %rs154 }, [ %rd6 + 0 ];
	@!%p1 mov.u16 %rs154, %rs2;
	// end inline asm
	.loc	1 87 31                         // rope.py:87:31
	add.s64 	%rd7, %rd5, 128;
	.loc	1 87 23                         // rope.py:87:23
	// begin inline asm
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r28, 0x0;
	mov.u32 %r29, 0x0;
	@%p15 ld.global.v4.b32 { %r26, %r27, %r28, %r29 }, [ %rd7 + 0 ];
	@!%p15 mov.u32 %r26, %r6;
	@!%p15 mov.u32 %r27, %r6;
	@!%p15 mov.u32 %r28, %r6;
	@!%p15 mov.u32 %r29, %r6;
	// end inline asm
	mov.b32 	{%rs34, %rs37}, %r26;
	mov.b32 	{%rs40, %rs43}, %r27;
	mov.b32 	{%rs46, %rs49}, %r28;
	mov.b32 	{%rs52, %rs55}, %r29;
	.loc	1 88 31                         // rope.py:88:31
	add.s64 	%rd8, %rd6, 128;
	.loc	1 88 23                         // rope.py:88:23
	// begin inline asm
	mov.u16 %rs157, 0x0;
	@%p1 ld.global.b16 { %rs157 }, [ %rd8 + 0 ];
	@!%p1 mov.u16 %rs157, %rs2;
	// end inline asm
	.loc	1 92 34                         // rope.py:92:34
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs58, %rs10, %rs11, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs61, %rs13, %rs14, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs64, %rs16, %rs17, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs67, %rs19, %rs20, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs70, %rs22, %rs23, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs73, %rs25, %rs26, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs76, %rs28, %rs29, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs79, %rs31, %rs32, c; } 

	// end inline asm
	.loc	1 92 55                         // rope.py:92:55
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs59, %rs34, %rs35, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs62, %rs37, %rs38, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs65, %rs40, %rs41, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs68, %rs43, %rs44, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs71, %rs46, %rs47, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs74, %rs49, %rs50, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs77, %rs52, %rs53, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs80, %rs55, %rs56, c; } 

	// end inline asm
	.loc	1 92 44                         // rope.py:92:44
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs57, %rs59, c, %rs58;} 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs60, %rs62, c, %rs61;} 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs63, %rs65, c, %rs64;} 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs66, %rs68, c, %rs67;} 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs69, %rs71, c, %rs70;} 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs72, %rs74, c, %rs73;} 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs75, %rs77, c, %rs76;} 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs78, %rs80, c, %rs79;} 

	// end inline asm
	.loc	1 93 47                         // rope.py:93:47
	mov.b32 	%r78, {%rs57, %rs60};
	mov.b32 	%r79, {%rs63, %rs66};
	mov.b32 	%r80, {%rs69, %rs72};
	mov.b32 	%r81, {%rs75, %rs78};
	// begin inline asm
	@%p15 st.global.v4.b32 [ %rd5 + 0 ], { %r78, %r79, %r80, %r81 };
	// end inline asm
	.loc	1 94 34                         // rope.py:94:34
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs130, %rs34, %rs11, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs133, %rs37, %rs14, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs136, %rs40, %rs17, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs139, %rs43, %rs20, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs142, %rs46, %rs23, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs145, %rs49, %rs26, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs148, %rs52, %rs29, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs151, %rs55, %rs32, c; } 

	// end inline asm
	.loc	1 94 55                         // rope.py:94:55
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs131, %rs10, %rs35, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs134, %rs13, %rs38, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs137, %rs16, %rs41, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs140, %rs19, %rs44, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs143, %rs22, %rs47, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs146, %rs25, %rs50, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs149, %rs28, %rs53, c; } 

	// end inline asm
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs152, %rs31, %rs56, c; } 

	// end inline asm
	.loc	1 94 44                         // rope.py:94:44
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs129, %rs130, c, %rs131; } 

	// end inline asm
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs132, %rs133, c, %rs134; } 

	// end inline asm
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs135, %rs136, c, %rs137; } 

	// end inline asm
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs138, %rs139, c, %rs140; } 

	// end inline asm
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs141, %rs142, c, %rs143; } 

	// end inline asm
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs144, %rs145, c, %rs146; } 

	// end inline asm
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs147, %rs148, c, %rs149; } 

	// end inline asm
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs150, %rs151, c, %rs152; } 

	// end inline asm
	.loc	1 95 48                         // rope.py:95:48
	mov.b32 	%r82, {%rs129, %rs132};
	mov.b32 	%r83, {%rs135, %rs138};
	mov.b32 	%r84, {%rs141, %rs144};
	mov.b32 	%r85, {%rs147, %rs150};
	// begin inline asm
	@%p15 st.global.v4.b32 [ %rd7 + 0 ], { %r82, %r83, %r84, %r85 };
	// end inline asm
	.loc	1 97 34                         // rope.py:97:34
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs160, %rs154, %rs155, c; } 

	// end inline asm
	.loc	1 97 55                         // rope.py:97:55
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs161, %rs157, %rs158, c; } 

	// end inline asm
	.loc	1 97 44                         // rope.py:97:44
	// begin inline asm
	 { .reg .b16 c;         
    mov.b16 c, 0xbf80U; 
    fma.rn.bf16 %rs162, %rs161, c, %rs160;} 

	// end inline asm
	.loc	1 98 47                         // rope.py:98:47
	// begin inline asm
	@%p1 st.global.b16 [ %rd6 + 0 ], { %rs162 };
	// end inline asm
	.loc	1 99 34                         // rope.py:99:34
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs170, %rs157, %rs155, c; } 

	// end inline asm
	.loc	1 99 55                         // rope.py:99:55
	// begin inline asm
	 { .reg .b16 c;        
    mov.b16 c, 0x8000U; 
    fma.rn.bf16 %rs171, %rs154, %rs158, c; } 

	// end inline asm
	.loc	1 99 44                         // rope.py:99:44
	// begin inline asm
	{ .reg .b16 c;         
   mov.b16 c, 0x3f80U; 
   fma.rn.bf16 %rs172, %rs170, c, %rs171; } 

	// end inline asm
	.loc	1 100 48                        // rope.py:100:48
	// begin inline asm
	@%p1 st.global.b16 [ %rd8 + 0 ], { %rs172 };
	// end inline asm
	.loc	1 90 4                          // rope.py:90:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/root/miniconda3/lib/python3.12/site-packages/liger_kernel/ops/rope.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 92                                 // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x55 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 114                                 // DW_AT_name
.b8 111
.b8 112
.b8 101
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 50
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 108
.b8 105
.b8 103
.b8 101
.b8 114
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 47
.b8 111
.b8 112
.b8 115
.b8 0
	}
	.section	.debug_macinfo	{	}
