//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_89
.address_size 64

	// .globl	_rms_norm_forward_kernel // -- Begin function _rms_norm_forward_kernel
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
                                        // @_rms_norm_forward_kernel
.visible .entry _rms_norm_forward_kernel(
	.param .u64 .ptr .global .align 1 _rms_norm_forward_kernel_param_0,
	.param .u32 _rms_norm_forward_kernel_param_1,
	.param .u64 .ptr .global .align 1 _rms_norm_forward_kernel_param_2,
	.param .u32 _rms_norm_forward_kernel_param_3,
	.param .u64 .ptr .global .align 1 _rms_norm_forward_kernel_param_4,
	.param .u64 .ptr .global .align 1 _rms_norm_forward_kernel_param_5,
	.param .u32 _rms_norm_forward_kernel_param_6,
	.param .f32 _rms_norm_forward_kernel_param_7,
	.param .f32 _rms_norm_forward_kernel_param_8
)
.reqntid 256, 1, 1
{
	.reg .pred 	%p<17>;
	.reg .b16 	%rs<65>;
	.reg .b32 	%r<113>;
	.reg .f32 	%f<80>;
	.reg .b64 	%rd<15>;
	.loc	1 42 0                          // rms_norm.py:42:0
$L__func_begin0:
	.loc	1 42 0                          // rms_norm.py:42:0

// %bb.0:                               // %__nv_rsqrtf.exit
	ld.param.u64 	%rd5, [_rms_norm_forward_kernel_param_0];
	ld.param.u32 	%r72, [_rms_norm_forward_kernel_param_1];
$L__tmp0:
	.loc	1 66 28                         // rms_norm.py:66:28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	ld.param.u64 	%rd6, [_rms_norm_forward_kernel_param_2];
	.loc	1 67 31                         // rms_norm.py:67:31
	mov.u32 	%r73, %tid.x;
	and.b32  	%r74, %r73, 31;
	ld.param.u32 	%r75, [_rms_norm_forward_kernel_param_3];
	ld.param.u64 	%rd7, [_rms_norm_forward_kernel_param_4];
	shl.b32 	%r76, %r73, 3;
	ld.param.u64 	%rd8, [_rms_norm_forward_kernel_param_5];
	and.b32  	%r77, %r76, 2040;
	ld.param.u32 	%r78, [_rms_norm_forward_kernel_param_6];
	.loc	1 68 25                         // rms_norm.py:68:25
	setp.lt.s32 	%p1, %r77, %r78;
	ld.param.f32 	%f1, [_rms_norm_forward_kernel_param_7];
	.loc	1 71 23                         // rms_norm.py:71:23
	mul.lo.s32 	%r79, %r1, %r75;
	ld.param.f32 	%f2, [_rms_norm_forward_kernel_param_8];
	.loc	1 71 13                         // rms_norm.py:71:13
	mul.wide.s32 	%rd9, %r79, 2;
	add.s64 	%rd10, %rd6, %rd9;
	.loc	1 74 28                         // rms_norm.py:74:28
	mul.wide.u32 	%rd11, %r77, 2;
	add.s64 	%rd1, %rd10, %rd11;
	mov.b32 	%r6, 0;
	.loc	1 74 20                         // rms_norm.py:74:20
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	@%p1 ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r2, %r6;
	@!%p1 mov.u32 %r3, %r6;
	@!%p1 mov.u32 %r4, %r6;
	@!%p1 mov.u32 %r5, %r6;
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r2;
	mov.b32 	{%rs43, %rs44}, %r3;
	mov.b32 	{%rs45, %rs46}, %r4;
	mov.b32 	{%rs47, %rs48}, %r5;
	.loc	1 76 28                         // rms_norm.py:76:28
	add.s64 	%rd2, %rd7, %rd11;
	.loc	1 76 20                         // rms_norm.py:76:20
	// begin inline asm
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	@%p1 ld.global.v4.b32 { %r10, %r11, %r12, %r13 }, [ %rd2 + 0 ];
	@!%p1 mov.u32 %r10, %r6;
	@!%p1 mov.u32 %r11, %r6;
	@!%p1 mov.u32 %r12, %r6;
	@!%p1 mov.u32 %r13, %r6;
	// end inline asm
	.loc	1 80 25                         // rms_norm.py:80:25
	// begin inline asm
	cvt.f32.bf16 %r18, %rs41;
	// end inline asm
	mov.b32 	%f3, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs42;
	// end inline asm
	mov.b32 	%f4, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs43;
	// end inline asm
	mov.b32 	%f5, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs44;
	// end inline asm
	mov.b32 	%f6, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs45;
	// end inline asm
	mov.b32 	%f7, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs46;
	// end inline asm
	mov.b32 	%f8, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs47;
	// end inline asm
	mov.b32 	%f9, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs48;
	// end inline asm
	mov.b32 	%f10, %r25;
	.loc	1 91 33                         // rms_norm.py:91:33
	mul.f32 	%f11, %f4, %f4;
$L__tmp1:
	.loc	2 256 15                        // standard.py:256:15
	fma.rn.f32 	%f12, %f3, %f3, %f11;
	fma.rn.f32 	%f13, %f5, %f5, %f12;
	fma.rn.f32 	%f14, %f6, %f6, %f13;
	fma.rn.f32 	%f15, %f7, %f7, %f14;
	fma.rn.f32 	%f16, %f8, %f8, %f15;
	fma.rn.f32 	%f17, %f9, %f9, %f16;
	fma.rn.f32 	%f18, %f10, %f10, %f17;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r84, %f18;
	shfl.sync.bfly.b32	%r85, %r84, 16, 31, -1;
	mov.b32 	%f19, %r85;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f20, %f18, %f19;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r86, %f20;
	shfl.sync.bfly.b32	%r87, %r86, 8, 31, -1;
	mov.b32 	%f21, %r87;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f22, %f20, %f21;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r88, %f22;
	shfl.sync.bfly.b32	%r89, %r88, 4, 31, -1;
	mov.b32 	%f23, %r89;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f24, %f22, %f23;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r90, %f24;
	shfl.sync.bfly.b32	%r91, %r90, 2, 31, -1;
	mov.b32 	%f25, %r91;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f26, %f24, %f25;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r92, %f26;
	shfl.sync.bfly.b32	%r93, %r92, 1, 31, -1;
	mov.b32 	%f27, %r93;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f28, %f26, %f27;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p11, %r74, 0;
	shr.u32 	%r94, %r73, 3;
	and.b32  	%r95, %r94, 28;
	mov.u32 	%r96, global_smem;
	add.s32 	%r26, %r96, %r95;
	mov.b32 	%r27, %f28;
	// begin inline asm
	@%p11 st.shared.b32 [ %r26 + 0 ], %r27;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p12, %r73, 8;
	shl.b32 	%r97, %r73, 2;
	add.s32 	%r29, %r96, %r97;
	// begin inline asm
	@%p12 ld.shared.b32 %r28, [ %r29 + 0 ];
	// end inline asm
	mov.b32 	%f29, %r28;
	shfl.sync.bfly.b32	%r98, %r28, 4, 31, -1;
	mov.b32 	%f30, %r98;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f31, %f29, %f30;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r99, %f31;
	shfl.sync.bfly.b32	%r100, %r99, 2, 31, -1;
	mov.b32 	%f32, %r100;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f33, %f31, %f32;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r101, %f33;
	shfl.sync.bfly.b32	%r102, %r101, 1, 31, -1;
	mov.b32 	%f34, %r102;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f35, %f33, %f34;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r103, %r73, 7;
	setp.eq.s32 	%p16, %r103, 0;
	and.pred  	%p13, %p12, %p16;
	mov.b32 	%r31, %f35;
	// begin inline asm
	@%p13 st.shared.b32 [ %r29 + 0 ], %r31;
	// end inline asm
	bar.sync 	0;
$L__tmp2:
	.loc	1 91 50                         // rms_norm.py:91:50
	cvt.rn.f32.s32 	%f36, %r78;
	mov.b32 	%r34, %f36;
	ld.shared.u32 	%r33, [global_smem];
	// begin inline asm
	div.full.f32 %r32, %r33, %r34;
	// end inline asm
	mov.b32 	%f37, %r32;
	.loc	1 92 31                         // rms_norm.py:92:31
	add.f32 	%f38, %f1, %f37;
	.loc	1 92 17                         // rms_norm.py:92:17
	rsqrt.approx.ftz.f32 	%f39, %f38;
	.loc	1 76 20                         // rms_norm.py:76:20
	mov.b32 	{%rs49, %rs50}, %r13;
	mov.b32 	{%rs51, %rs52}, %r12;
	mov.b32 	{%rs53, %rs54}, %r11;
	mov.b32 	{%rs55, %rs56}, %r10;
	.loc	1 72 16                         // rms_norm.py:72:16
	mul.wide.s32 	%rd12, %r1, 4;
	add.s64 	%rd3, %rd8, %rd12;
	.loc	1 70 23                         // rms_norm.py:70:23
	mul.lo.s32 	%r108, %r1, %r72;
	.loc	1 70 13                         // rms_norm.py:70:13
	mul.wide.s32 	%rd13, %r108, 2;
	add.s64 	%rd14, %rd5, %rd13;
	.loc	1 97 23                         // rms_norm.py:97:23
	setp.eq.s32 	%p14, %r73, 0;
	mov.b32 	%r35, %f39;
	// begin inline asm
	@%p14 st.global.b32 [ %rd3 + 0 ], { %r35 };
	// end inline asm
	.loc	1 99 20                         // rms_norm.py:99:20
	mul.f32 	%f40, %f3, %f39;
	mul.f32 	%f41, %f4, %f39;
	mul.f32 	%f42, %f5, %f39;
	mul.f32 	%f43, %f6, %f39;
	mul.f32 	%f44, %f7, %f39;
	mul.f32 	%f45, %f8, %f39;
	mul.f32 	%f46, %f9, %f39;
	mul.f32 	%f47, %f10, %f39;
	.loc	1 103 25                        // rms_norm.py:103:25
	mov.b32 	%r36, %f40;
	// begin inline asm
	cvt.rn.bf16.f32 %rs25, %r36;
	// end inline asm
	mov.b32 	%r37, %f41;
	// begin inline asm
	cvt.rn.bf16.f32 %rs26, %r37;
	// end inline asm
	mov.b32 	%r38, %f42;
	// begin inline asm
	cvt.rn.bf16.f32 %rs27, %r38;
	// end inline asm
	mov.b32 	%r39, %f43;
	// begin inline asm
	cvt.rn.bf16.f32 %rs28, %r39;
	// end inline asm
	mov.b32 	%r40, %f44;
	// begin inline asm
	cvt.rn.bf16.f32 %rs29, %r40;
	// end inline asm
	mov.b32 	%r41, %f45;
	// begin inline asm
	cvt.rn.bf16.f32 %rs30, %r41;
	// end inline asm
	mov.b32 	%r42, %f46;
	// begin inline asm
	cvt.rn.bf16.f32 %rs31, %r42;
	// end inline asm
	mov.b32 	%r43, %f47;
	// begin inline asm
	cvt.rn.bf16.f32 %rs32, %r43;
	// end inline asm
	.loc	1 105 30                        // rms_norm.py:105:30
	// begin inline asm
	cvt.f32.bf16 %r44, %rs55;
	// end inline asm
	mov.b32 	%f48, %r44;
	// begin inline asm
	cvt.f32.bf16 %r45, %rs56;
	// end inline asm
	mov.b32 	%f49, %r45;
	// begin inline asm
	cvt.f32.bf16 %r46, %rs53;
	// end inline asm
	mov.b32 	%f50, %r46;
	// begin inline asm
	cvt.f32.bf16 %r47, %rs54;
	// end inline asm
	mov.b32 	%f51, %r47;
	// begin inline asm
	cvt.f32.bf16 %r48, %rs51;
	// end inline asm
	mov.b32 	%f52, %r48;
	// begin inline asm
	cvt.f32.bf16 %r49, %rs52;
	// end inline asm
	mov.b32 	%f53, %r49;
	// begin inline asm
	cvt.f32.bf16 %r50, %rs49;
	// end inline asm
	mov.b32 	%f54, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs50;
	// end inline asm
	mov.b32 	%f55, %r51;
	add.f32 	%f56, %f2, %f48;
	add.f32 	%f57, %f2, %f49;
	add.f32 	%f58, %f2, %f50;
	add.f32 	%f59, %f2, %f51;
	add.f32 	%f60, %f2, %f52;
	add.f32 	%f61, %f2, %f53;
	add.f32 	%f62, %f2, %f54;
	add.f32 	%f63, %f2, %f55;
	.loc	1 105 21                        // rms_norm.py:105:21
	// begin inline asm
	cvt.f32.bf16 %r52, %rs25;
	// end inline asm
	mov.b32 	%f64, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs26;
	// end inline asm
	mov.b32 	%f65, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs27;
	// end inline asm
	mov.b32 	%f66, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs28;
	// end inline asm
	mov.b32 	%f67, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs29;
	// end inline asm
	mov.b32 	%f68, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs30;
	// end inline asm
	mov.b32 	%f69, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs31;
	// end inline asm
	mov.b32 	%f70, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs32;
	// end inline asm
	mov.b32 	%f71, %r59;
	mul.f32 	%f72, %f56, %f64;
	mul.f32 	%f73, %f57, %f65;
	mul.f32 	%f74, %f58, %f66;
	mul.f32 	%f75, %f59, %f67;
	mul.f32 	%f76, %f60, %f68;
	mul.f32 	%f77, %f61, %f69;
	mul.f32 	%f78, %f62, %f70;
	mul.f32 	%f79, %f63, %f71;
	.loc	1 110 21                        // rms_norm.py:110:21
	add.s64 	%rd4, %rd14, %rd11;
	.loc	1 110 34                        // rms_norm.py:110:34
	mov.b32 	%r60, %f72;
	// begin inline asm
	cvt.rn.bf16.f32 %rs33, %r60;
	// end inline asm
	mov.b32 	%r61, %f73;
	// begin inline asm
	cvt.rn.bf16.f32 %rs34, %r61;
	// end inline asm
	mov.b32 	%r62, %f74;
	// begin inline asm
	cvt.rn.bf16.f32 %rs35, %r62;
	// end inline asm
	mov.b32 	%r63, %f75;
	// begin inline asm
	cvt.rn.bf16.f32 %rs36, %r63;
	// end inline asm
	mov.b32 	%r64, %f76;
	// begin inline asm
	cvt.rn.bf16.f32 %rs37, %r64;
	// end inline asm
	mov.b32 	%r65, %f77;
	// begin inline asm
	cvt.rn.bf16.f32 %rs38, %r65;
	// end inline asm
	mov.b32 	%r66, %f78;
	// begin inline asm
	cvt.rn.bf16.f32 %rs39, %r66;
	// end inline asm
	mov.b32 	%r67, %f79;
	// begin inline asm
	cvt.rn.bf16.f32 %rs40, %r67;
	// end inline asm
	mov.b32 	%r109, {%rs33, %rs34};
	mov.b32 	%r110, {%rs35, %rs36};
	mov.b32 	%r111, {%rs37, %rs38};
	mov.b32 	%r112, {%rs39, %rs40};
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd4 + 0 ], { %r109, %r110, %r111, %r112 };
	// end inline asm
	.loc	1 110 4                         // rms_norm.py:110:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/root/miniconda3/lib/python3.12/site-packages/liger_kernel/ops/rms_norm.py"
	.file	2 "/root/miniconda3/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 170                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xa3 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 114                                 // DW_AT_name
.b8 109
.b8 115
.b8 95
.b8 110
.b8 111
.b8 114
.b8 109
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 50
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 108
.b8 105
.b8 103
.b8 101
.b8 114
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 47
.b8 111
.b8 112
.b8 115
.b8 0
.b8 2                                   // Abbrev [2] 0x64:0x1b DW_TAG_subprogram
.b8 95                                  // DW_AT_name
.b8 114
.b8 109
.b8 115
.b8 95
.b8 110
.b8 111
.b8 114
.b8 109
.b8 95
.b8 102
.b8 111
.b8 114
.b8 119
.b8 97
.b8 114
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x7f:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 100                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x94:0x18 DW_TAG_inlined_subroutine
.b32 100                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 91                                  // DW_AT_call_line
.b8 25                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
