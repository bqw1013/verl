; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @_rms_norm_forward_kernel(ptr addrspace(1) %0, i32 %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, float %7, float %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 3, !dbg !11
  %15 = and i32 %14, 2040, !dbg !11
  %16 = icmp slt i32 %15, %6, !dbg !12
  %17 = mul i32 %10, %3, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr bfloat, ptr addrspace(1) %2, i64 %18, !dbg !14
  %20 = zext nneg i32 %15 to i64, !dbg !15
  %21 = getelementptr bfloat, ptr addrspace(1) %19, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %24 = bitcast i32 %23 to <2 x bfloat>, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !16
  %31 = extractelement <2 x bfloat> %24, i64 0, !dbg !16
  %32 = extractelement <2 x bfloat> %24, i64 1, !dbg !16
  %33 = extractelement <2 x bfloat> %26, i64 0, !dbg !16
  %34 = extractelement <2 x bfloat> %26, i64 1, !dbg !16
  %35 = extractelement <2 x bfloat> %28, i64 0, !dbg !16
  %36 = extractelement <2 x bfloat> %28, i64 1, !dbg !16
  %37 = extractelement <2 x bfloat> %30, i64 0, !dbg !16
  %38 = extractelement <2 x bfloat> %30, i64 1, !dbg !16
  %39 = getelementptr bfloat, ptr addrspace(1) %4, i64 %20, !dbg !17
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !18
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %31) #5, !dbg !19
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %32) #5, !dbg !19
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %33) #5, !dbg !19
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %34) #5, !dbg !19
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %35) #5, !dbg !19
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %36) #5, !dbg !19
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %37) #5, !dbg !19
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %38) #5, !dbg !19
  %49 = fmul float %41, %41, !dbg !20
  %50 = fmul float %42, %42, !dbg !20
  %51 = fmul float %43, %43, !dbg !20
  %52 = fmul float %44, %44, !dbg !20
  %53 = fmul float %45, %45, !dbg !20
  %54 = fmul float %46, %46, !dbg !20
  %55 = fmul float %47, %47, !dbg !20
  %56 = fmul float %48, %48, !dbg !20
  %57 = fadd float %49, %50, !dbg !21
  %58 = fadd float %57, %51, !dbg !21
  %59 = fadd float %58, %52, !dbg !21
  %60 = fadd float %59, %53, !dbg !21
  %61 = fadd float %60, %54, !dbg !21
  %62 = fadd float %61, %55, !dbg !21
  %63 = fadd float %62, %56, !dbg !21
  %64 = bitcast float %63 to i32, !dbg !26
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = fadd float %63, %66, !dbg !21
  %68 = bitcast float %67 to i32, !dbg !26
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = fadd float %67, %70, !dbg !21
  %72 = bitcast float %71 to i32, !dbg !26
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 4, i32 31), !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = fadd float %71, %74, !dbg !21
  %76 = bitcast float %75 to i32, !dbg !26
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !26
  %78 = bitcast i32 %77 to float, !dbg !26
  %79 = fadd float %75, %78, !dbg !21
  %80 = bitcast float %79 to i32, !dbg !26
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !26
  %82 = bitcast i32 %81 to float, !dbg !26
  %83 = fadd float %79, %82, !dbg !21
  %84 = icmp eq i32 %12, 0, !dbg !26
  %85 = and i32 %13, 7, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !26
  %87 = bitcast float %83 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %84) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %88 = icmp slt i32 %11, 8, !dbg !26
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #5, !dbg !26
  %91 = bitcast i32 %90 to float, !dbg !26
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !26
  %93 = bitcast i32 %92 to float, !dbg !26
  %94 = fadd float %91, %93, !dbg !21
  %95 = bitcast float %94 to i32, !dbg !26
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = fadd float %94, %97, !dbg !21
  %99 = bitcast float %98 to i32, !dbg !26
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = fadd float %98, %101, !dbg !21
  %103 = and i32 %11, 7, !dbg !26
  %104 = icmp eq i32 %103, 0, !dbg !26
  %105 = and i1 %88, %104, !dbg !26
  %106 = bitcast float %102 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %106, i1 %105) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %107 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %108 = sitofp i32 %6 to float, !dbg !27
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %108) #5, !dbg !27
  %110 = fadd float %7, %109, !dbg !28
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %111, 0, !dbg !29
  br i1 %.not.i, label %114, label %112, !dbg !29

112:                                              ; preds = %9
  %113 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %110), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

114:                                              ; preds = %9
  %115 = tail call float @llvm.nvvm.rsqrt.approx.f(float %110), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %112, %114
  %.0.i = phi float [ %113, %112 ], [ %115, %114 ], !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !18
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !18
  %118 = extractelement <2 x bfloat> %117, i64 1, !dbg !18
  %119 = extractelement <2 x bfloat> %117, i64 0, !dbg !18
  %120 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !18
  %121 = bitcast i32 %120 to <2 x bfloat>, !dbg !18
  %122 = extractelement <2 x bfloat> %121, i64 1, !dbg !18
  %123 = extractelement <2 x bfloat> %121, i64 0, !dbg !18
  %124 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !18
  %125 = bitcast i32 %124 to <2 x bfloat>, !dbg !18
  %126 = extractelement <2 x bfloat> %125, i64 1, !dbg !18
  %127 = extractelement <2 x bfloat> %125, i64 0, !dbg !18
  %128 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !18
  %129 = bitcast i32 %128 to <2 x bfloat>, !dbg !18
  %130 = extractelement <2 x bfloat> %129, i64 1, !dbg !18
  %131 = extractelement <2 x bfloat> %129, i64 0, !dbg !18
  %132 = sext i32 %10 to i64, !dbg !30
  %133 = getelementptr float, ptr addrspace(1) %5, i64 %132, !dbg !30
  %134 = mul i32 %10, %1, !dbg !31
  %135 = sext i32 %134 to i64, !dbg !32
  %136 = getelementptr bfloat, ptr addrspace(1) %0, i64 %135, !dbg !32
  %137 = icmp eq i32 %11, 0, !dbg !33
  %138 = bitcast float %.0.i to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %133, i1 %137) #5, !dbg !33
  %139 = fmul float %41, %.0.i, !dbg !34
  %140 = fmul float %42, %.0.i, !dbg !34
  %141 = fmul float %43, %.0.i, !dbg !34
  %142 = fmul float %44, %.0.i, !dbg !34
  %143 = fmul float %45, %.0.i, !dbg !34
  %144 = fmul float %46, %.0.i, !dbg !34
  %145 = fmul float %47, %.0.i, !dbg !34
  %146 = fmul float %48, %.0.i, !dbg !34
  %147 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %139) #5, !dbg !35
  %148 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %140) #5, !dbg !35
  %149 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %141) #5, !dbg !35
  %150 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %142) #5, !dbg !35
  %151 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %143) #5, !dbg !35
  %152 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %144) #5, !dbg !35
  %153 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %145) #5, !dbg !35
  %154 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %146) #5, !dbg !35
  %155 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %131) #5, !dbg !36
  %156 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %130) #5, !dbg !36
  %157 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %127) #5, !dbg !36
  %158 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %126) #5, !dbg !36
  %159 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %123) #5, !dbg !36
  %160 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %122) #5, !dbg !36
  %161 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %119) #5, !dbg !36
  %162 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %118) #5, !dbg !36
  %163 = fadd float %8, %155, !dbg !36
  %164 = fadd float %8, %156, !dbg !36
  %165 = fadd float %8, %157, !dbg !36
  %166 = fadd float %8, %158, !dbg !36
  %167 = fadd float %8, %159, !dbg !36
  %168 = fadd float %8, %160, !dbg !36
  %169 = fadd float %8, %161, !dbg !36
  %170 = fadd float %8, %162, !dbg !36
  %171 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %147) #5, !dbg !37
  %172 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %148) #5, !dbg !37
  %173 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %149) #5, !dbg !37
  %174 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %150) #5, !dbg !37
  %175 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %151) #5, !dbg !37
  %176 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %152) #5, !dbg !37
  %177 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %153) #5, !dbg !37
  %178 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %154) #5, !dbg !37
  %179 = fmul float %163, %171, !dbg !37
  %180 = fmul float %164, %172, !dbg !37
  %181 = fmul float %165, %173, !dbg !37
  %182 = fmul float %166, %174, !dbg !37
  %183 = fmul float %167, %175, !dbg !37
  %184 = fmul float %168, %176, !dbg !37
  %185 = fmul float %169, %177, !dbg !37
  %186 = fmul float %170, %178, !dbg !37
  %187 = getelementptr bfloat, ptr addrspace(1) %136, i64 %20, !dbg !38
  %188 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %179) #5, !dbg !39
  %189 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %180) #5, !dbg !39
  %190 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %181) #5, !dbg !39
  %191 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %182) #5, !dbg !39
  %192 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %183) #5, !dbg !39
  %193 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %184) #5, !dbg !39
  %194 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %185) #5, !dbg !39
  %195 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %186) #5, !dbg !39
  %196 = insertelement <2 x bfloat> poison, bfloat %188, i64 0, !dbg !39
  %197 = insertelement <2 x bfloat> %196, bfloat %189, i64 1, !dbg !39
  %198 = bitcast <2 x bfloat> %197 to i32, !dbg !39
  %199 = insertelement <2 x bfloat> poison, bfloat %190, i64 0, !dbg !39
  %200 = insertelement <2 x bfloat> %199, bfloat %191, i64 1, !dbg !39
  %201 = bitcast <2 x bfloat> %200 to i32, !dbg !39
  %202 = insertelement <2 x bfloat> poison, bfloat %192, i64 0, !dbg !39
  %203 = insertelement <2 x bfloat> %202, bfloat %193, i64 1, !dbg !39
  %204 = bitcast <2 x bfloat> %203 to i32, !dbg !39
  %205 = insertelement <2 x bfloat> poison, bfloat %194, i64 0, !dbg !39
  %206 = insertelement <2 x bfloat> %205, bfloat %195, i64 1, !dbg !39
  %207 = bitcast <2 x bfloat> %206 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %201, i32 %204, i32 %207, ptr addrspace(1) %187, i1 %16) #5, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rms_norm.py", directory: "/root/miniconda3/lib/python3.12/site-packages/liger_kernel/ops")
!4 = !{ptr @_rms_norm_forward_kernel, !"kernel", i32 1}
!5 = !{ptr @_rms_norm_forward_kernel, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_rms_norm_forward_kernel", linkageName: "_rms_norm_forward_kernel", scope: !3, file: !3, line: 42, type: !8, scopeLine: 42, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 66, column: 28, scope: !7)
!11 = !DILocation(line: 67, column: 31, scope: !7)
!12 = !DILocation(line: 68, column: 25, scope: !7)
!13 = !DILocation(line: 71, column: 23, scope: !7)
!14 = !DILocation(line: 71, column: 13, scope: !7)
!15 = !DILocation(line: 74, column: 28, scope: !7)
!16 = !DILocation(line: 74, column: 20, scope: !7)
!17 = !DILocation(line: 76, column: 28, scope: !7)
!18 = !DILocation(line: 76, column: 20, scope: !7)
!19 = !DILocation(line: 80, column: 25, scope: !7)
!20 = !DILocation(line: 91, column: 33, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/root/miniconda3/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 91, column: 25, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 91, column: 50, scope: !7)
!28 = !DILocation(line: 92, column: 31, scope: !7)
!29 = !DILocation(line: 92, column: 17, scope: !7)
!30 = !DILocation(line: 72, column: 16, scope: !7)
!31 = !DILocation(line: 70, column: 23, scope: !7)
!32 = !DILocation(line: 70, column: 13, scope: !7)
!33 = !DILocation(line: 97, column: 23, scope: !7)
!34 = !DILocation(line: 99, column: 20, scope: !7)
!35 = !DILocation(line: 103, column: 25, scope: !7)
!36 = !DILocation(line: 105, column: 30, scope: !7)
!37 = !DILocation(line: 105, column: 21, scope: !7)
!38 = !DILocation(line: 110, column: 21, scope: !7)
!39 = !DILocation(line: 110, column: 34, scope: !7)
!40 = !DILocation(line: 110, column: 4, scope: !7)
