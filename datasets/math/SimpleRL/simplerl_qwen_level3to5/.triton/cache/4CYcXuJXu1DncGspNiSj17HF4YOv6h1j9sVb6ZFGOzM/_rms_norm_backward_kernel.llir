; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @_rms_norm_backward_kernel(ptr addrspace(1) %0, i32 %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) %4, i32 %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10, i32 %11, float %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = mul i32 %14, 25, !dbg !11
  %16 = add i32 %15, 25, !dbg !12
  %17 = tail call i32 @llvm.smin.i32(i32 %16, i32 %10), !dbg !13
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %19 = shl i32 %18, 3, !dbg !14
  %20 = and i32 %19, 2040, !dbg !14
  %21 = icmp slt i32 %20, %11, !dbg !15
  %22 = zext nneg i32 %20 to i64, !dbg !16
  %23 = getelementptr bfloat, ptr addrspace(1) %6, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = bitcast i32 %25 to <2 x bfloat>, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %28 = bitcast i32 %27 to <2 x bfloat>, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %30 = bitcast i32 %29 to <2 x bfloat>, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %32 = bitcast i32 %31 to <2 x bfloat>, !dbg !17
  %33 = extractelement <2 x bfloat> %26, i64 0, !dbg !17
  %34 = extractelement <2 x bfloat> %26, i64 1, !dbg !17
  %35 = extractelement <2 x bfloat> %28, i64 0, !dbg !17
  %36 = extractelement <2 x bfloat> %28, i64 1, !dbg !17
  %37 = extractelement <2 x bfloat> %30, i64 0, !dbg !17
  %38 = extractelement <2 x bfloat> %30, i64 1, !dbg !17
  %39 = extractelement <2 x bfloat> %32, i64 0, !dbg !17
  %40 = extractelement <2 x bfloat> %32, i64 1, !dbg !17
  %41 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %33) #3, !dbg !18
  %42 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %34) #3, !dbg !18
  %43 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %35) #3, !dbg !18
  %44 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %36) #3, !dbg !18
  %45 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %37) #3, !dbg !18
  %46 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %38) #3, !dbg !18
  %47 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %39) #3, !dbg !18
  %48 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %40) #3, !dbg !18
  %49 = fadd float %12, %41, !dbg !18
  %50 = fadd float %12, %42, !dbg !18
  %51 = fadd float %12, %43, !dbg !18
  %52 = fadd float %12, %44, !dbg !18
  %53 = fadd float %12, %45, !dbg !18
  %54 = fadd float %12, %46, !dbg !18
  %55 = fadd float %12, %47, !dbg !18
  %56 = fadd float %12, %48, !dbg !18
  %57 = sitofp i32 %11 to float, !dbg !19
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %57) #3, !dbg !19
  %59 = fsub float 0.000000e+00, %58, !dbg !20
  %60 = icmp slt i32 %15, %17, !dbg !21
  br i1 %60, label %.lr.ph, label %._crit_edge, !dbg !21

.lr.ph:                                           ; preds = %13
  %61 = sext i32 %15 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %7, i64 %61, !dbg !22
  %63 = mul i32 %15, %5, !dbg !23
  %64 = sext i32 %63 to i64, !dbg !24
  %65 = getelementptr bfloat, ptr addrspace(1) %4, i64 %64, !dbg !24
  %66 = mul i32 %15, %3, !dbg !25
  %67 = sext i32 %66 to i64, !dbg !26
  %68 = getelementptr bfloat, ptr addrspace(1) %2, i64 %67, !dbg !26
  %69 = mul i32 %15, %1, !dbg !27
  %70 = sext i32 %69 to i64, !dbg !28
  %71 = getelementptr bfloat, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = lshr i32 %18, 5, !dbg !14
  %73 = and i32 %18, 31, !dbg !14
  %74 = icmp eq i32 %73, 0
  %75 = and i32 %72, 7
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75
  %77 = icmp slt i32 %18, 8
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %18
  %79 = and i32 %18, 7
  %80 = icmp eq i32 %79, 0
  %81 = and i1 %77, %80
  %82 = sext i32 %1 to i64
  %83 = sext i32 %3 to i64
  %84 = sext i32 %5 to i64
  br label %85, !dbg !21

85:                                               ; preds = %.lr.ph, %85
  %86 = phi ptr addrspace(1) [ %62, %.lr.ph ], [ %305, %85 ]
  %87 = phi ptr addrspace(1) [ %65, %.lr.ph ], [ %304, %85 ]
  %88 = phi ptr addrspace(1) [ %68, %.lr.ph ], [ %303, %85 ]
  %89 = phi ptr addrspace(1) [ %71, %.lr.ph ], [ %302, %85 ]
  %90 = phi i32 [ %15, %.lr.ph ], [ %306, %85 ]
  %91 = phi <8 x float> [ zeroinitializer, %.lr.ph ], [ %280, %85 ]
  %92 = getelementptr bfloat, ptr addrspace(1) %89, i64 %22, !dbg !29
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !30
  %95 = bitcast i32 %94 to <2 x bfloat>, !dbg !30
  %96 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !30
  %97 = bitcast i32 %96 to <2 x bfloat>, !dbg !30
  %98 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !30
  %99 = bitcast i32 %98 to <2 x bfloat>, !dbg !30
  %100 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !30
  %101 = bitcast i32 %100 to <2 x bfloat>, !dbg !30
  %102 = extractelement <2 x bfloat> %95, i64 0, !dbg !30
  %103 = extractelement <2 x bfloat> %95, i64 1, !dbg !30
  %104 = extractelement <2 x bfloat> %97, i64 0, !dbg !30
  %105 = extractelement <2 x bfloat> %97, i64 1, !dbg !30
  %106 = extractelement <2 x bfloat> %99, i64 0, !dbg !30
  %107 = extractelement <2 x bfloat> %99, i64 1, !dbg !30
  %108 = extractelement <2 x bfloat> %101, i64 0, !dbg !30
  %109 = extractelement <2 x bfloat> %101, i64 1, !dbg !30
  %110 = getelementptr bfloat, ptr addrspace(1) %87, i64 %22, !dbg !31
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !32
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !32
  %113 = bitcast i32 %112 to <2 x bfloat>, !dbg !32
  %114 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !32
  %115 = bitcast i32 %114 to <2 x bfloat>, !dbg !32
  %116 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !32
  %117 = bitcast i32 %116 to <2 x bfloat>, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !32
  %119 = bitcast i32 %118 to <2 x bfloat>, !dbg !32
  %120 = extractelement <2 x bfloat> %113, i64 0, !dbg !32
  %121 = extractelement <2 x bfloat> %113, i64 1, !dbg !32
  %122 = extractelement <2 x bfloat> %115, i64 0, !dbg !32
  %123 = extractelement <2 x bfloat> %115, i64 1, !dbg !32
  %124 = extractelement <2 x bfloat> %117, i64 0, !dbg !32
  %125 = extractelement <2 x bfloat> %117, i64 1, !dbg !32
  %126 = extractelement <2 x bfloat> %119, i64 0, !dbg !32
  %127 = extractelement <2 x bfloat> %119, i64 1, !dbg !32
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !33
  %129 = bitcast i32 %128 to float, !dbg !33
  %130 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %120) #3, !dbg !34
  %131 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %121) #3, !dbg !34
  %132 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %122) #3, !dbg !34
  %133 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %123) #3, !dbg !34
  %134 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %124) #3, !dbg !34
  %135 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %125) #3, !dbg !34
  %136 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %126) #3, !dbg !34
  %137 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %127) #3, !dbg !34
  %138 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %102) #3, !dbg !35
  %139 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %103) #3, !dbg !35
  %140 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %104) #3, !dbg !35
  %141 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %105) #3, !dbg !35
  %142 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %106) #3, !dbg !35
  %143 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %107) #3, !dbg !35
  %144 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %108) #3, !dbg !35
  %145 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %109) #3, !dbg !35
  %146 = fmul float %49, %138, !dbg !35
  %147 = fmul float %50, %139, !dbg !35
  %148 = fmul float %51, %140, !dbg !35
  %149 = fmul float %52, %141, !dbg !35
  %150 = fmul float %53, %142, !dbg !35
  %151 = fmul float %54, %143, !dbg !35
  %152 = fmul float %55, %144, !dbg !35
  %153 = fmul float %56, %145, !dbg !35
  %154 = fmul float %146, %129, !dbg !36
  %155 = fmul float %147, %129, !dbg !36
  %156 = fmul float %148, %129, !dbg !36
  %157 = fmul float %149, %129, !dbg !36
  %158 = fmul float %150, %129, !dbg !36
  %159 = fmul float %151, %129, !dbg !36
  %160 = fmul float %152, %129, !dbg !36
  %161 = fmul float %153, %129, !dbg !36
  %162 = fmul float %59, %129, !dbg !37
  %163 = fmul float %162, %129, !dbg !38
  %164 = fmul float %130, %146, !dbg !39
  %165 = fmul float %131, %147, !dbg !39
  %166 = fmul float %132, %148, !dbg !39
  %167 = fmul float %133, %149, !dbg !39
  %168 = fmul float %134, %150, !dbg !39
  %169 = fmul float %135, %151, !dbg !39
  %170 = fmul float %136, %152, !dbg !39
  %171 = fmul float %137, %153, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %172 = fadd float %164, %165, !dbg !44
  %173 = fadd float %172, %166, !dbg !44
  %174 = fadd float %173, %167, !dbg !44
  %175 = fadd float %174, %168, !dbg !44
  %176 = fadd float %175, %169, !dbg !44
  %177 = fadd float %176, %170, !dbg !44
  %178 = fadd float %177, %171, !dbg !44
  %179 = bitcast float %178 to i32, !dbg !40
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 16, i32 31), !dbg !40
  %181 = bitcast i32 %180 to float, !dbg !40
  %182 = fadd float %178, %181, !dbg !44
  %183 = bitcast float %182 to i32, !dbg !40
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !40
  %185 = bitcast i32 %184 to float, !dbg !40
  %186 = fadd float %182, %185, !dbg !44
  %187 = bitcast float %186 to i32, !dbg !40
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 4, i32 31), !dbg !40
  %189 = bitcast i32 %188 to float, !dbg !40
  %190 = fadd float %186, %189, !dbg !44
  %191 = bitcast float %190 to i32, !dbg !40
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !40
  %193 = bitcast i32 %192 to float, !dbg !40
  %194 = fadd float %190, %193, !dbg !44
  %195 = bitcast float %194 to i32, !dbg !40
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !40
  %197 = bitcast i32 %196 to float, !dbg !40
  %198 = fadd float %194, %197, !dbg !44
  %199 = bitcast float %198 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %199, i1 %74) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %200 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %78, i1 %77) #3, !dbg !40
  %201 = bitcast i32 %200 to float, !dbg !40
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 4, i32 31), !dbg !40
  %203 = bitcast i32 %202 to float, !dbg !40
  %204 = fadd float %201, %203, !dbg !44
  %205 = bitcast float %204 to i32, !dbg !40
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !40
  %207 = bitcast i32 %206 to float, !dbg !40
  %208 = fadd float %204, %207, !dbg !44
  %209 = bitcast float %208 to i32, !dbg !40
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 1, i32 31), !dbg !40
  %211 = bitcast i32 %210 to float, !dbg !40
  %212 = fadd float %208, %211, !dbg !44
  %213 = bitcast float %212 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %213, i1 %81) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %214 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %215 = fmul float %163, %214, !dbg !46
  %216 = fmul float %130, %215, !dbg !47
  %217 = fmul float %131, %215, !dbg !47
  %218 = fmul float %132, %215, !dbg !47
  %219 = fmul float %133, %215, !dbg !47
  %220 = fmul float %134, %215, !dbg !47
  %221 = fmul float %135, %215, !dbg !47
  %222 = fmul float %136, %215, !dbg !47
  %223 = fmul float %137, %215, !dbg !47
  %224 = fmul float %216, %129, !dbg !48
  %225 = fmul float %217, %129, !dbg !48
  %226 = fmul float %218, %129, !dbg !48
  %227 = fmul float %219, %129, !dbg !48
  %228 = fmul float %220, %129, !dbg !48
  %229 = fmul float %221, %129, !dbg !48
  %230 = fmul float %222, %129, !dbg !48
  %231 = fmul float %223, %129, !dbg !48
  %232 = fadd float %154, %224, !dbg !49
  %233 = fadd float %155, %225, !dbg !49
  %234 = fadd float %156, %226, !dbg !49
  %235 = fadd float %157, %227, !dbg !49
  %236 = fadd float %158, %228, !dbg !49
  %237 = fadd float %159, %229, !dbg !49
  %238 = fadd float %160, %230, !dbg !49
  %239 = fadd float %161, %231, !dbg !49
  %240 = fmul float %130, %129, !dbg !50
  %241 = fmul float %131, %129, !dbg !50
  %242 = fmul float %132, %129, !dbg !50
  %243 = fmul float %133, %129, !dbg !50
  %244 = fmul float %134, %129, !dbg !50
  %245 = fmul float %135, %129, !dbg !50
  %246 = fmul float %136, %129, !dbg !50
  %247 = fmul float %137, %129, !dbg !50
  %248 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %240) #3, !dbg !51
  %249 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %241) #3, !dbg !51
  %250 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %242) #3, !dbg !51
  %251 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %243) #3, !dbg !51
  %252 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %244) #3, !dbg !51
  %253 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %245) #3, !dbg !51
  %254 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %246) #3, !dbg !51
  %255 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #3, !dbg !51
  %256 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %102, bfloat %248) #3, !dbg !52
  %257 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %103, bfloat %249) #3, !dbg !52
  %258 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %104, bfloat %250) #3, !dbg !52
  %259 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %105, bfloat %251) #3, !dbg !52
  %260 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %106, bfloat %252) #3, !dbg !52
  %261 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %107, bfloat %253) #3, !dbg !52
  %262 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %108, bfloat %254) #3, !dbg !52
  %263 = tail call bfloat asm " { .reg .b16 c;        \0A    mov.b16 c, 0x8000U; \0A    fma.rn.bf16 $0, $1, $2, c; } \0A", "=h,h,h"(bfloat %109, bfloat %255) #3, !dbg !52
  %264 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %256) #3, !dbg !53
  %265 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %257) #3, !dbg !53
  %266 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %258) #3, !dbg !53
  %267 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %259) #3, !dbg !53
  %268 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %260) #3, !dbg !53
  %269 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %261) #3, !dbg !53
  %270 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %262) #3, !dbg !53
  %271 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %263) #3, !dbg !53
  %272 = insertelement <8 x float> poison, float %264, i64 0, !dbg !53
  %273 = insertelement <8 x float> %272, float %265, i64 1, !dbg !53
  %274 = insertelement <8 x float> %273, float %266, i64 2, !dbg !53
  %275 = insertelement <8 x float> %274, float %267, i64 3, !dbg !53
  %276 = insertelement <8 x float> %275, float %268, i64 4, !dbg !53
  %277 = insertelement <8 x float> %276, float %269, i64 5, !dbg !53
  %278 = insertelement <8 x float> %277, float %270, i64 6, !dbg !53
  %279 = insertelement <8 x float> %278, float %271, i64 7, !dbg !53
  %280 = fadd <8 x float> %91, %279, !dbg !53
  %281 = getelementptr bfloat, ptr addrspace(1) %88, i64 %22, !dbg !54
  %282 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %232) #3, !dbg !55
  %283 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %233) #3, !dbg !55
  %284 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %234) #3, !dbg !55
  %285 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %235) #3, !dbg !55
  %286 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %236) #3, !dbg !55
  %287 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %237) #3, !dbg !55
  %288 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %238) #3, !dbg !55
  %289 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %239) #3, !dbg !55
  %290 = insertelement <2 x bfloat> poison, bfloat %282, i64 0, !dbg !56
  %291 = insertelement <2 x bfloat> %290, bfloat %283, i64 1, !dbg !56
  %292 = bitcast <2 x bfloat> %291 to i32, !dbg !56
  %293 = insertelement <2 x bfloat> poison, bfloat %284, i64 0, !dbg !56
  %294 = insertelement <2 x bfloat> %293, bfloat %285, i64 1, !dbg !56
  %295 = bitcast <2 x bfloat> %294 to i32, !dbg !56
  %296 = insertelement <2 x bfloat> poison, bfloat %286, i64 0, !dbg !56
  %297 = insertelement <2 x bfloat> %296, bfloat %287, i64 1, !dbg !56
  %298 = bitcast <2 x bfloat> %297 to i32, !dbg !56
  %299 = insertelement <2 x bfloat> poison, bfloat %288, i64 0, !dbg !56
  %300 = insertelement <2 x bfloat> %299, bfloat %289, i64 1, !dbg !56
  %301 = bitcast <2 x bfloat> %300 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %295, i32 %298, i32 %301, ptr addrspace(1) %281, i1 %21) #3, !dbg !56
  %302 = getelementptr bfloat, ptr addrspace(1) %89, i64 %82, !dbg !57
  %303 = getelementptr bfloat, ptr addrspace(1) %88, i64 %83, !dbg !58
  %304 = getelementptr bfloat, ptr addrspace(1) %87, i64 %84, !dbg !59
  %305 = getelementptr i8, ptr addrspace(1) %86, i64 4, !dbg !60
  %306 = add i32 %90, 1, !dbg !21
  %exitcond.not = icmp eq i32 %306, %17, !dbg !21
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %85, !dbg !21

._crit_edge.loopexit:                             ; preds = %85
  %307 = bitcast <8 x float> %280 to <8 x i32>, !dbg !61
  br label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %13
  %308 = phi <8 x i32> [ zeroinitializer, %13 ], [ %307, %._crit_edge.loopexit ]
  %309 = shl i32 %18, 2, !dbg !14
  %310 = and i32 %309, 1020, !dbg !14
  %311 = or disjoint i32 %310, 1024, !dbg !14
  %312 = icmp slt i32 %311, %11, !dbg !15
  %313 = icmp slt i32 %310, %11, !dbg !15
  %314 = mul i32 %14, %9, !dbg !62
  %315 = sext i32 %314 to i64, !dbg !63
  %316 = getelementptr float, ptr addrspace(1) %8, i64 %315, !dbg !63
  %317 = zext nneg i32 %310 to i64, !dbg !64
  %318 = getelementptr float, ptr addrspace(1) %316, i64 %317, !dbg !64
  %319 = zext nneg i32 %311 to i64, !dbg !64
  %320 = getelementptr float, ptr addrspace(1) %316, i64 %319, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !61
  %322 = extractelement <8 x i32> %308, i64 0, !dbg !61
  %323 = extractelement <8 x i32> %308, i64 1, !dbg !61
  %324 = extractelement <8 x i32> %308, i64 2, !dbg !61
  %325 = extractelement <8 x i32> %308, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %321, i32 %322, i32 %323, i32 %324, i32 %325, i1 true) #3, !dbg !61
  %326 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 16, !dbg !61
  %327 = extractelement <8 x i32> %308, i64 4, !dbg !61
  %328 = extractelement <8 x i32> %308, i64 5, !dbg !61
  %329 = extractelement <8 x i32> %308, i64 6, !dbg !61
  %330 = extractelement <8 x i32> %308, i64 7, !dbg !61
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %326, i32 %327, i32 %328, i32 %329, i32 %330, i1 true) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !61
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !61
  %333 = load <4 x i32>, ptr addrspace(3) %332, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %331, align 16, !dbg !61
  %334 = getelementptr inbounds i8, ptr addrspace(3) %331, i32 4, !dbg !61
  %.extract8 = load i32, ptr addrspace(3) %334, align 4, !dbg !61
  %335 = getelementptr inbounds i8, ptr addrspace(3) %331, i32 8, !dbg !61
  %.extract9 = load i32, ptr addrspace(3) %335, align 8, !dbg !61
  %336 = getelementptr inbounds i8, ptr addrspace(3) %331, i32 12, !dbg !61
  %.extract10 = load i32, ptr addrspace(3) %336, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %318, i1 %313) #3, !dbg !61
  %.extract11 = extractelement <4 x i32> %333, i64 0, !dbg !61
  %.extract12 = extractelement <4 x i32> %333, i64 1, !dbg !61
  %.extract13 = extractelement <4 x i32> %333, i64 2, !dbg !61
  %.extract14 = extractelement <4 x i32> %333, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %320, i1 %312) #3, !dbg !61
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rms_norm.py", directory: "/root/miniconda3/lib/python3.12/site-packages/liger_kernel/ops")
!4 = !{ptr @_rms_norm_backward_kernel, !"kernel", i32 1}
!5 = !{ptr @_rms_norm_backward_kernel, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_rms_norm_backward_kernel", linkageName: "_rms_norm_backward_kernel", scope: !3, file: !3, line: 114, type: !8, scopeLine: 114, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 140, column: 33, scope: !7)
!11 = !DILocation(line: 141, column: 31, scope: !7)
!12 = !DILocation(line: 142, column: 39, scope: !7)
!13 = !DILocation(line: 142, column: 57, scope: !7)
!14 = !DILocation(line: 143, column: 31, scope: !7)
!15 = !DILocation(line: 144, column: 25, scope: !7)
!16 = !DILocation(line: 154, column: 28, scope: !7)
!17 = !DILocation(line: 154, column: 20, scope: !7)
!18 = !DILocation(line: 155, column: 20, scope: !7)
!19 = !DILocation(line: 178, column: 38, scope: !7)
!20 = !DILocation(line: 178, column: 34, scope: !7)
!21 = !DILocation(line: 157, column: 30, scope: !7)
!22 = !DILocation(line: 152, column: 16, scope: !7)
!23 = !DILocation(line: 151, column: 25, scope: !7)
!24 = !DILocation(line: 151, column: 13, scope: !7)
!25 = !DILocation(line: 149, column: 26, scope: !7)
!26 = !DILocation(line: 149, column: 14, scope: !7)
!27 = !DILocation(line: 148, column: 26, scope: !7)
!28 = !DILocation(line: 148, column: 14, scope: !7)
!29 = !DILocation(line: 158, column: 34, scope: !7)
!30 = !DILocation(line: 158, column: 25, scope: !7)
!31 = !DILocation(line: 159, column: 32, scope: !7)
!32 = !DILocation(line: 159, column: 24, scope: !7)
!33 = !DILocation(line: 162, column: 27, scope: !7)
!34 = !DILocation(line: 164, column: 25, scope: !7)
!35 = !DILocation(line: 168, column: 26, scope: !7)
!36 = !DILocation(line: 176, column: 28, scope: !7)
!37 = !DILocation(line: 178, column: 48, scope: !7)
!38 = !DILocation(line: 178, column: 59, scope: !7)
!39 = !DILocation(line: 178, column: 81, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/root/miniconda3/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 178, column: 77, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !43)
!45 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!46 = !DILocation(line: 178, column: 70, scope: !7)
!47 = !DILocation(line: 178, column: 98, scope: !7)
!48 = !DILocation(line: 178, column: 32, scope: !7)
!49 = !DILocation(line: 178, column: 18, scope: !7)
!50 = !DILocation(line: 182, column: 40, scope: !7)
!51 = !DILocation(line: 182, column: 53, scope: !7)
!52 = !DILocation(line: 182, column: 31, scope: !7)
!53 = !DILocation(line: 182, column: 22, scope: !7)
!54 = !DILocation(line: 187, column: 26, scope: !7)
!55 = !DILocation(line: 187, column: 49, scope: !7)
!56 = !DILocation(line: 187, column: 39, scope: !7)
!57 = !DILocation(line: 189, column: 18, scope: !7)
!58 = !DILocation(line: 190, column: 18, scope: !7)
!59 = !DILocation(line: 191, column: 17, scope: !7)
!60 = !DILocation(line: 192, column: 20, scope: !7)
!61 = !DILocation(line: 194, column: 66, scope: !7)
!62 = !DILocation(line: 194, column: 37, scope: !7)
!63 = !DILocation(line: 194, column: 22, scope: !7)
!64 = !DILocation(line: 194, column: 53, scope: !7)
!65 = !DILocation(line: 194, column: 4, scope: !7)
